{
  "address": "0xDBc6501645407CF4D3af383FbD5Bf7586b135d81",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wKP3R",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMinter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPendingGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "DustSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "MinterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pendingGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_wKP3R",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "wKP3RDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_wKP3R",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "wKP3RMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newWKP3R",
          "type": "address"
        }
      ],
      "name": "wKP3RSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "sendDust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingGovernor",
          "type": "address"
        }
      ],
      "name": "setPendingGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wKP3R",
          "type": "address"
        }
      ],
      "name": "setWKP3R",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wKP3R",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x90beb78c831c2aabff3a4dc96ad0a219804d0343fdcac671156051a1eff2ab69",
  "receipt": {
    "to": null,
    "from": "0xA825fc60eB4B1269F1dF0f6E574b953d2b5f7EFc",
    "contractAddress": "0xDBc6501645407CF4D3af383FbD5Bf7586b135d81",
    "transactionIndex": 41,
    "gasUsed": "690309",
    "logsBloom": "0x
    "blockHash": "0x5f4d36200e4d49a83c1442bcc05b47f52bfa1b5a536d3639ba27604bbd104930",
    "transactionHash": "0x90beb78c831c2aabff3a4dc96ad0a219804d0343fdcac671156051a1eff2ab69",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 39514678,
        "transactionHash": "0x90beb78c831c2aabff3a4dc96ad0a219804d0343fdcac671156051a1eff2ab69",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a825fc60eb4b1269f1df0f6e574b953d2b5f7efc",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000005c14eb412fb8bf0000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000000000742ab1d9f8eef2fa4810000000000000000000000000000000000000000000000001b65587c0d984741000000000000000000000000000000000000000000000742ab79b47a305f5d40",
        "logIndex": 191,
        "blockHash": "0x5f4d36200e4d49a83c1442bcc05b47f52bfa1b5a536d3639ba27604bbd104930"
      }
    ],
    "blockNumber": 39514678,
    "cumulativeGasUsed": "8581807",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9A040a31bc38919D50FD740973dBB6F8fdee1426",
    "0x4a2bE2075588BcE6A7E072574698a7DbbAc39b08"
  ],
  "numDeployments": 1,
  "solcInputHash": "3a869c3b827b38468356d50761a61b47",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wKP3R\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMinter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPendingGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"DustSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"MinterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_wKP3R\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"wKP3RDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_wKP3R\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"wKP3RMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newWKP3R\",\"type\":\"address\"}],\"name\":\"wKP3RSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"sendDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wKP3R\",\"type\":\"address\"}],\"name\":\"setWKP3R\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wKP3R\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_governor\":\"Address of governor\",\"_wKP3R\":\"Address of wrapped KP3R implementation\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\"The amount of wKP3R to deposit\"}},\"mint(uint256)\":{\"params\":{\"_amount\":\"The amount of wKP3R to mint\"}},\"sendDust(address,uint256,address)\":{\"params\":{\"_amount\":\"The amont of the token that will be transferred\",\"_to\":\"The address that will receive the idle funds\",\"_token\":\"The token that will be transferred\"}},\"setMinter(address)\":{\"params\":{\"_minter\":\"The address set as the minter\"}},\"setPendingGovernor(address)\":{\"params\":{\"_pendingGovernor\":\"Address of the proposed new governor\"}},\"setWKP3R(address)\":{\"params\":{\"_wKP3R\":\"the wKP3R address\"}}},\"stateVariables\":{\"wKP3R\":{\"return\":\"_wKP3RAddress The address of wKP3R\",\"returns\":{\"_0\":\"_wKP3RAddress The address of wKP3R\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientBalance()\":[{\"notice\":\"Throws when minter attempts to withdraw more wKP3R than the escrow has in its balance\"}],\"InvalidAddress()\":[{\"notice\":\"Thrown if an address is invalid\"}],\"InvalidAmount()\":[{\"notice\":\"Thrown if an amount is invalid\"}],\"LengthMismatch()\":[{\"notice\":\"Thrown if the lengths of a set of lists mismatch\"}],\"OnlyGovernor()\":[{\"notice\":\"Thrown if a non-governor user tries to call a OnlyGovernor function\"}],\"OnlyMinter()\":[{\"notice\":\"Throws if the caller of the function is not the minter\"}],\"OnlyPendingGovernor()\":[{\"notice\":\"Thrown if a non-pending-governor user tries to call a OnlyPendingGovernor function\"}],\"ZeroAddress()\":[{\"notice\":\"Thrown if an address is the zero address\"}],\"ZeroAmount()\":[{\"notice\":\"Thrown if an amount is zero\"}]},\"events\":{\"DustSent(address,uint256,address)\":{\"notice\":\"Emitted when dust is sent\"},\"MinterSet(address)\":{\"notice\":\"Emitted when governor sets a new minter\"},\"PendingGovernorAccepted(address)\":{\"notice\":\"Emitted when a new governor is set\"},\"PendingGovernorSet(address,address)\":{\"notice\":\"Emitted when a new pending governor is set\"},\"wKP3RDeposited(address,address,uint256)\":{\"notice\":\"Emitted when Keep3rEscrow#deposit function is called\"},\"wKP3RMinted(address,address,uint256)\":{\"notice\":\"Emitted when Keep3rEscrow#mint function is called\"},\"wKP3RSet(address)\":{\"notice\":\"Emitted when Keep3rEscrow#setWKP3R function is called\"}},\"kind\":\"user\",\"methods\":{\"acceptPendingGovernor()\":{\"notice\":\"Allows a proposed governor to accept the governance\"},\"deposit(uint256)\":{\"notice\":\"Deposits wKP3R into the contract\"},\"mint(uint256)\":{\"notice\":\"mints wKP3R to the recipient\"},\"minter()\":{\"notice\":\"Stores the minter address\"},\"sendDust(address,uint256,address)\":{\"notice\":\"Allows an authorized user to transfer the tokens or eth that may have been left in a contract\"},\"setMinter(address)\":{\"notice\":\"Sets a new address to be the minter\"},\"setPendingGovernor(address)\":{\"notice\":\"Allows a governor to propose a new governor\"},\"setWKP3R(address)\":{\"notice\":\"sets the wKP3R address\"},\"wKP3R()\":{\"notice\":\"Lists the address of the wKP3R contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/contracts/sidechain/Keep3rEscrow.sol\":\"Keep3rEscrow\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@defi-wonderland/solidity-utils/solidity/contracts/DustCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {Governable} from './Governable.sol';\\nimport {IDustCollector} from '../interfaces/IDustCollector.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n/// @title DustCollector contract\\nabstract contract DustCollector is IDustCollector, Governable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @inheritdoc IDustCollector\\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @inheritdoc IDustCollector\\n    function sendDust(address _token, uint256 _amount, address _to) external onlyGovernor {\\n        if (_to == address(0)) revert ZeroAddress();\\n        if (_token == ETH_ADDRESS) payable(_to).transfer(_amount);\\n        else IERC20(_token).safeTransfer(_to, _amount);\\n        emit DustSent(_token, _amount, _to);\\n    }\\n}\\n\",\"keccak256\":\"0xcdd6d0715406facd602770cca9320eebdc2b7b23b0e0f9e1b7b576fbc0126b47\",\"license\":\"MIT\"},\"@defi-wonderland/solidity-utils/solidity/contracts/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IGovernable} from '../interfaces/IGovernable.sol';\\n\\n/// @title Governable contract\\n/// @notice Manages the governor role\\nabstract contract Governable is IGovernable {\\n    /// @inheritdoc IGovernable\\n    address public governor;\\n\\n    /// @inheritdoc IGovernable\\n    address public pendingGovernor;\\n\\n    constructor(address _governor) {\\n        if (_governor == address(0)) revert ZeroAddress();\\n        governor = _governor;\\n    }\\n\\n    /// @inheritdoc IGovernable\\n    function setPendingGovernor(address _pendingGovernor) external onlyGovernor {\\n        _setPendingGovernor(_pendingGovernor);\\n    }\\n\\n    /// @inheritdoc IGovernable\\n    function acceptPendingGovernor() external onlyPendingGovernor {\\n        _acceptPendingGovernor();\\n    }\\n\\n    function _setPendingGovernor(address _pendingGovernor) internal {\\n        if (_pendingGovernor == address(0)) revert ZeroAddress();\\n        pendingGovernor = _pendingGovernor;\\n        emit PendingGovernorSet(governor, _pendingGovernor);\\n    }\\n\\n    function _acceptPendingGovernor() internal {\\n        governor = pendingGovernor;\\n        delete pendingGovernor;\\n        emit PendingGovernorAccepted(governor);\\n    }\\n\\n    /// @notice Functions with this modifier can only be called by governor\\n    modifier onlyGovernor() {\\n        if (msg.sender != governor) revert OnlyGovernor();\\n        _;\\n    }\\n\\n    /// @notice Functions with this modifier can only be called by pendingGovernor\\n    modifier onlyPendingGovernor() {\\n        if (msg.sender != pendingGovernor) revert OnlyPendingGovernor();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x3f11408cfcb015a99dc417e075c8ebc39b796fc2adc3e81b036487e4486881b3\",\"license\":\"MIT\"},\"@defi-wonderland/solidity-utils/solidity/interfaces/IBaseErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\ninterface IBaseErrors {\\n    /// @notice Thrown if an address is invalid\\n    error InvalidAddress();\\n\\n    /// @notice Thrown if an amount is invalid\\n    error InvalidAmount();\\n\\n    /// @notice Thrown if the lengths of a set of lists mismatch\\n    error LengthMismatch();\\n\\n    /// @notice Thrown if an address is the zero address\\n    error ZeroAddress();\\n\\n    /// @notice Thrown if an amount is zero\\n    error ZeroAmount();\\n}\\n\",\"keccak256\":\"0xec09b9d248b6fbf6343dee41d6978abdc15d4c8df5ed7721e8df79e8b1a558cf\",\"license\":\"MIT\"},\"@defi-wonderland/solidity-utils/solidity/interfaces/IDustCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IGovernable} from './IGovernable.sol';\\nimport {IBaseErrors} from './IBaseErrors.sol';\\n\\n/// @title DustCollector interface\\ninterface IDustCollector is IBaseErrors, IGovernable {\\n    // STATE VARIABLES\\n\\n    /// @return _ethAddress Address used to trigger a native token transfer\\n    // solhint-disable-next-line func-name-mixedcase\\n    function ETH_ADDRESS() external view returns (address _ethAddress);\\n\\n    // EVENTS\\n\\n    /// @notice Emitted when dust is sent\\n    /// @param _to The address which wil received the funds\\n    /// @param _token The token that will be transferred\\n    /// @param _amount The amount of the token that will be transferred\\n    event DustSent(address _token, uint256 _amount, address _to);\\n\\n    // FUNCTIONS\\n\\n    /// @notice Allows an authorized user to transfer the tokens or eth that may have been left in a contract\\n    /// @param _token The token that will be transferred\\n    /// @param _amount The amont of the token that will be transferred\\n    /// @param _to The address that will receive the idle funds\\n    function sendDust(address _token, uint256 _amount, address _to) external;\\n}\\n\",\"keccak256\":\"0xbe22cc660bd6846093504989146038bd369f511325cef40cdc647fe7e04206b1\",\"license\":\"MIT\"},\"@defi-wonderland/solidity-utils/solidity/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.8 <0.9.0;\\n\\nimport {IBaseErrors} from './IBaseErrors.sol';\\n\\n/// @title Governable interface\\ninterface IGovernable is IBaseErrors {\\n    // STATE VARIABLES\\n\\n    /// @return _governor Address of the current governor\\n    function governor() external view returns (address _governor);\\n\\n    /// @return _pendingGovernor Address of the current pending governor\\n    function pendingGovernor() external view returns (address _pendingGovernor);\\n\\n    // EVENTS\\n\\n    /// @notice Emitted when a new pending governor is set\\n    /// @param _governor Address of the current governor\\n    /// @param _pendingGovernor Address of the proposed next governor\\n    event PendingGovernorSet(address _governor, address _pendingGovernor);\\n\\n    /// @notice Emitted when a new governor is set\\n    /// @param _newGovernor Address of the new governor\\n    event PendingGovernorAccepted(address _newGovernor);\\n\\n    // ERRORS\\n\\n    /// @notice Thrown if a non-governor user tries to call a OnlyGovernor function\\n    error OnlyGovernor();\\n\\n    /// @notice Thrown if a non-pending-governor user tries to call a OnlyPendingGovernor function\\n    error OnlyPendingGovernor();\\n\\n    // FUNCTIONS\\n\\n    /// @notice Allows a governor to propose a new governor\\n    /// @param _pendingGovernor Address of the proposed new governor\\n    function setPendingGovernor(address _pendingGovernor) external;\\n\\n    /// @notice Allows a proposed governor to accept the governance\\n    function acceptPendingGovernor() external;\\n}\\n\",\"keccak256\":\"0x40b94706a00d2c092f620807ba84bdd0c5ed8cfa60140c924edc850427e0af13\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"solidity/contracts/peripherals/Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../../interfaces/peripherals/IMintable.sol';\\nimport '@defi-wonderland/solidity-utils/solidity/contracts/Governable.sol';\\n\\nabstract contract Mintable is Governable, IMintable {\\n  /// @inheritdoc IMintable\\n  address public override minter;\\n\\n  constructor(address _governor) Governable(_governor) {}\\n\\n  /// @inheritdoc IMintable\\n  function setMinter(address _minter) external override onlyGovernor {\\n    if (_minter == address(0)) revert ZeroAddress();\\n    minter = _minter;\\n    emit MinterSet(_minter);\\n  }\\n\\n  /// @notice Functions with this modifier can only be called by the minter;\\n  modifier onlyMinter() {\\n    if (msg.sender != minter) revert OnlyMinter();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x6f70ca1b083865b02f0e44cc72c8c85ecab374724eda4544f3fb78555f070ea4\",\"license\":\"MIT\"},\"solidity/contracts/sidechain/Keep3rEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n\\nCoded for The Keep3r Network with \\u2665 by\\n\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2588\\u2588\\u2554\\u2550\\u2588\\u2588\\u2588\\u2588\\u2551\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u255a\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u255a\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\n\\nhttps://defi.sucks\\n\\nCommit hash: ead559c8dc4361349b7222741c2399447e255d8e\\n\\n*/\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../peripherals/Mintable.sol';\\nimport '../../interfaces/sidechain/IKeep3rEscrow.sol';\\nimport '@defi-wonderland/solidity-utils/solidity/contracts/DustCollector.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\ncontract Keep3rEscrow is Mintable, DustCollector, IKeep3rEscrow {\\n  using SafeERC20 for IERC20;\\n\\n  /// @inheritdoc IKeep3rEscrow\\n  address public override wKP3R;\\n\\n  /// @param _governor Address of governor\\n  /// @param _wKP3R Address of wrapped KP3R implementation\\n  constructor(address _governor, address _wKP3R) Mintable(_governor) {\\n    wKP3R = _wKP3R;\\n  }\\n\\n  /// @inheritdoc IKeep3rEscrow\\n  function deposit(uint256 _amount) external override {\\n    IERC20(wKP3R).safeTransferFrom(msg.sender, address(this), _amount);\\n    emit wKP3RDeposited(wKP3R, msg.sender, _amount);\\n  }\\n\\n  /// @inheritdoc IKeep3rEscrow\\n  function mint(uint256 _amount) external override onlyMinter {\\n    IERC20(wKP3R).safeTransfer(msg.sender, _amount);\\n    emit wKP3RMinted(wKP3R, msg.sender, _amount);\\n  }\\n\\n  /// @inheritdoc IKeep3rEscrow\\n  function setWKP3R(address _wKP3R) external override onlyGovernor {\\n    if (_wKP3R == address(0)) revert ZeroAddress();\\n    wKP3R = _wKP3R;\\n    emit wKP3RSet(wKP3R);\\n  }\\n}\\n\",\"keccak256\":\"0xbcd3de76bc05c78f894d5e257340d9de7f64c61935535b010fb92da42f5887b0\",\"license\":\"MIT\"},\"solidity/interfaces/peripherals/IMintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '@defi-wonderland/solidity-utils/solidity/interfaces/IBaseErrors.sol';\\nimport '@defi-wonderland/solidity-utils/solidity/interfaces/IGovernable.sol';\\n\\n/// @title Mintable contract\\n/// @notice Manages the minter role\\ninterface IMintable is IBaseErrors, IGovernable {\\n  // Events\\n\\n  /// @notice Emitted when governor sets a new minter\\n  /// @param _minter Address of the new minter\\n  event MinterSet(address _minter);\\n\\n  // Errors\\n\\n  /// @notice Throws if the caller of the function is not the minter\\n  error OnlyMinter();\\n\\n  // Variables\\n\\n  /// @notice Stores the minter address\\n  /// @return _minter The minter addresss\\n  function minter() external view returns (address _minter);\\n\\n  // Methods\\n\\n  /// @notice Sets a new address to be the minter\\n  /// @param _minter The address set as the minter\\n  function setMinter(address _minter) external;\\n}\\n\",\"keccak256\":\"0x0048c141d747eb1b0e9391ac9e13c268f858f2fec939c597992742e7a5e71597\",\"license\":\"MIT\"},\"solidity/interfaces/sidechain/IKeep3rEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\n// solhint-disable-next-line no-empty-blocks\\n\\nimport '../peripherals/IMintable.sol';\\n\\n/// @title Keep3rEscrow contract\\n/// @notice This contract acts as an escrow contract for wKP3R tokens on sidechains and L2s\\n/// @dev Can be used as a replacement for keep3rV1Proxy in keep3r sidechain implementations\\ninterface IKeep3rEscrow is IMintable {\\n  /// @notice Emitted when Keep3rEscrow#deposit function is called\\n  /// @param _wKP3R The addess of the wrapped KP3R token\\n  /// @param _sender The address that called the function\\n  /// @param _amount The amount of wKP3R the user deposited\\n  event wKP3RDeposited(address _wKP3R, address _sender, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rEscrow#mint function is called\\n  /// @param _wKP3R The addess of the wrapped KP3R token\\n  /// @param _recipient The address that will received the newly minted wKP3R\\n  /// @param _amount The amount of wKP3R minted to the recipient\\n  event wKP3RMinted(address _wKP3R, address _recipient, uint256 _amount);\\n\\n  /// @notice Emitted when Keep3rEscrow#setWKP3R function is called\\n  /// @param _newWKP3R The address of the wKP3R contract\\n  event wKP3RSet(address _newWKP3R);\\n\\n  /// @notice Throws when minter attempts to withdraw more wKP3R than the escrow has in its balance\\n  error InsufficientBalance();\\n\\n  /// @notice Lists the address of the wKP3R contract\\n  /// @return _wKP3RAddress The address of wKP3R\\n  function wKP3R() external view returns (address _wKP3RAddress);\\n\\n  /// @notice Deposits wKP3R into the contract\\n  /// @param _amount The amount of wKP3R to deposit\\n  function deposit(uint256 _amount) external;\\n\\n  /// @notice mints wKP3R to the recipient\\n  /// @param _amount The amount of wKP3R to mint\\n  function mint(uint256 _amount) external;\\n\\n  /// @notice sets the wKP3R address\\n  /// @param _wKP3R the wKP3R address\\n  function setWKP3R(address _wKP3R) external;\\n}\\n\",\"keccak256\":\"0xf4796dde1afba7f50805aeae92ac0a4848525aeca8355d9b1c6b36c15cca4322\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b92380380610b9283398101604081905261002f916100ac565b81806001600160a01b0381166100585760405163d92e233d60e01b815260040160405180910390fd5b600080546001600160a01b039283166001600160a01b0319918216179091556003805494909216931692909217909155506100df9050565b80516001600160a01b03811681146100a757600080fd5b919050565b600080604083850312156100bf57600080fd5b6100c883610090565b91506100d660208401610090565b90509250929050565b610aa4806100ee6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a734f06e11610071578063a734f06e1461013e578063b509ec4514610159578063b6b55f251461016c578063e3056a341461017f578063f235757f14610192578063fca3b5aa146101a557600080fd5b806307546172146100b95780630c340a24146100e857806313f6986d146100fb5780632131606414610105578063966abd0014610118578063a0712d681461012b575b600080fd5b6002546100cc906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6000546100cc906001600160a01b031681565b6101036101b8565b005b610103610113366004610961565b6101ed565b61010361012636600461097c565b610294565b6101036101393660046109b8565b6103aa565b6100cc73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6003546100cc906001600160a01b031681565b61010361017a3660046109b8565b610435565b6001546100cc906001600160a01b031681565b6101036101a0366004610961565b610496565b6101036101b3366004610961565b6104cd565b6001546001600160a01b031633146101e357604051639ba0305d60e01b815260040160405180910390fd5b6101eb61056d565b565b6000546001600160a01b031633146102185760405163070545c960e51b815260040160405180910390fd5b6001600160a01b03811661023f5760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f8592ade84fad7cc1c020f9783980e05e1be8bf3c0b6b557f3f5d5b48b5147647906020015b60405180910390a150565b6000546001600160a01b031633146102bf5760405163070545c960e51b815260040160405180910390fd5b6001600160a01b0381166102e65760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610347576040516001600160a01b0382169083156108fc029084906000818181858888f19350505050158015610341573d6000803e3d6000fd5b5061035b565b61035b6001600160a01b03841682846105cb565b604080516001600160a01b0385811682526020820185905283168183015290517f9a3055ded8c8b5f21bbf4946c5afab6e1fa8b3f057922658e5e1ade125fb0b1e9181900360600190a1505050565b6002546001600160a01b031633146103d557604051639cdc2ed560e01b815260040160405180910390fd5b6003546103ec906001600160a01b031633836105cb565b600354604080516001600160a01b03909216825233602083015281018290527f5c5d429f40d64606e3af1c2373aa5f5b0846566f2bb3871dcccf094850ed4fc890606001610289565b60035461044d906001600160a01b0316333084610633565b600354604080516001600160a01b03909216825233602083015281018290527fb0c9218af42df0588074c7f30948dd6d1293a5ef42e7762e83d62c5daa7c9b8490606001610289565b6000546001600160a01b031633146104c15760405163070545c960e51b815260040160405180910390fd5b6104ca81610671565b50565b6000546001600160a01b031633146104f85760405163070545c960e51b815260040160405180910390fd5b6001600160a01b03811661051f5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f726b590ef91a8c76ad05bbe91a57ef84605276528f49cd47d787f558a4e755b690602001610289565b60018054600080546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527f5d5d6e01b731c3e68060f7fe13156f6197d4aeffc2d6f498e34c717ae616b7349060200160405180910390a1565b6040516001600160a01b03831660248201526044810182905261062e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526106f4565b505050565b6040516001600160a01b038085166024830152831660448201526064810182905261066b9085906323b872dd60e01b906084016105f7565b50505050565b6001600160a01b0381166106985760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b038381169182179092556000546040805191909316815260208101919091527f6353ec38ac394f8be94bfafcdd3580d356470599059eaeebedc3207e1cc03dec9101610289565b6000610749826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107cb9092919063ffffffff16565b80519091501561062e578080602001905181019061076791906109d1565b61062e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b60606107da84846000856107e4565b90505b9392505050565b6060824710156108455760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107c2565b843b6108935760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107c2565b600080866001600160a01b031685876040516108af9190610a1f565b60006040518083038185875af1925050503d80600081146108ec576040519150601f19603f3d011682016040523d82523d6000602084013e6108f1565b606091505b509150915061090182828661090c565b979650505050505050565b6060831561091b5750816107dd565b82511561092b5782518084602001fd5b8160405162461bcd60e51b81526004016107c29190610a3b565b80356001600160a01b038116811461095c57600080fd5b919050565b60006020828403121561097357600080fd5b6107dd82610945565b60008060006060848603121561099157600080fd5b61099a84610945565b9250602084013591506109af60408501610945565b90509250925092565b6000602082840312156109ca57600080fd5b5035919050565b6000602082840312156109e357600080fd5b815180151581146107dd57600080fd5b60005b83811015610a0e5781810151838201526020016109f6565b8381111561066b5750506000910152565b60008251610a318184602087016109f3565b9190910192915050565b6020815260008251806020840152610a5a8160408501602087016109f3565b601f01601f1916919091016040019291505056fea2646970667358221220f434ab00043d895f70b777dbc3d2b90244ba2004f042a55d3494310dc78ef28564736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063a734f06e11610071578063a734f06e1461013e578063b509ec4514610159578063b6b55f251461016c578063e3056a341461017f578063f235757f14610192578063fca3b5aa146101a557600080fd5b806307546172146100b95780630c340a24146100e857806313f6986d146100fb5780632131606414610105578063966abd0014610118578063a0712d681461012b575b600080fd5b6002546100cc906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6000546100cc906001600160a01b031681565b6101036101b8565b005b610103610113366004610961565b6101ed565b61010361012636600461097c565b610294565b6101036101393660046109b8565b6103aa565b6100cc73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6003546100cc906001600160a01b031681565b61010361017a3660046109b8565b610435565b6001546100cc906001600160a01b031681565b6101036101a0366004610961565b610496565b6101036101b3366004610961565b6104cd565b6001546001600160a01b031633146101e357604051639ba0305d60e01b815260040160405180910390fd5b6101eb61056d565b565b6000546001600160a01b031633146102185760405163070545c960e51b815260040160405180910390fd5b6001600160a01b03811661023f5760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f8592ade84fad7cc1c020f9783980e05e1be8bf3c0b6b557f3f5d5b48b5147647906020015b60405180910390a150565b6000546001600160a01b031633146102bf5760405163070545c960e51b815260040160405180910390fd5b6001600160a01b0381166102e65760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610347576040516001600160a01b0382169083156108fc029084906000818181858888f19350505050158015610341573d6000803e3d6000fd5b5061035b565b61035b6001600160a01b03841682846105cb565b604080516001600160a01b0385811682526020820185905283168183015290517f9a3055ded8c8b5f21bbf4946c5afab6e1fa8b3f057922658e5e1ade125fb0b1e9181900360600190a1505050565b6002546001600160a01b031633146103d557604051639cdc2ed560e01b815260040160405180910390fd5b6003546103ec906001600160a01b031633836105cb565b600354604080516001600160a01b03909216825233602083015281018290527f5c5d429f40d64606e3af1c2373aa5f5b0846566f2bb3871dcccf094850ed4fc890606001610289565b60035461044d906001600160a01b0316333084610633565b600354604080516001600160a01b03909216825233602083015281018290527fb0c9218af42df0588074c7f30948dd6d1293a5ef42e7762e83d62c5daa7c9b8490606001610289565b6000546001600160a01b031633146104c15760405163070545c960e51b815260040160405180910390fd5b6104ca81610671565b50565b6000546001600160a01b031633146104f85760405163070545c960e51b815260040160405180910390fd5b6001600160a01b03811661051f5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f726b590ef91a8c76ad05bbe91a57ef84605276528f49cd47d787f558a4e755b690602001610289565b60018054600080546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527f5d5d6e01b731c3e68060f7fe13156f6197d4aeffc2d6f498e34c717ae616b7349060200160405180910390a1565b6040516001600160a01b03831660248201526044810182905261062e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526106f4565b505050565b6040516001600160a01b038085166024830152831660448201526064810182905261066b9085906323b872dd60e01b906084016105f7565b50505050565b6001600160a01b0381166106985760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b038381169182179092556000546040805191909316815260208101919091527f6353ec38ac394f8be94bfafcdd3580d356470599059eaeebedc3207e1cc03dec9101610289565b6000610749826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107cb9092919063ffffffff16565b80519091501561062e578080602001905181019061076791906109d1565b61062e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b60606107da84846000856107e4565b90505b9392505050565b6060824710156108455760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107c2565b843b6108935760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107c2565b600080866001600160a01b031685876040516108af9190610a1f565b60006040518083038185875af1925050503d80600081146108ec576040519150601f19603f3d011682016040523d82523d6000602084013e6108f1565b606091505b509150915061090182828661090c565b979650505050505050565b6060831561091b5750816107dd565b82511561092b5782518084602001fd5b8160405162461bcd60e51b81526004016107c29190610a3b565b80356001600160a01b038116811461095c57600080fd5b919050565b60006020828403121561097357600080fd5b6107dd82610945565b60008060006060848603121561099157600080fd5b61099a84610945565b9250602084013591506109af60408501610945565b90509250925092565b6000602082840312156109ca57600080fd5b5035919050565b6000602082840312156109e357600080fd5b815180151581146107dd57600080fd5b60005b83811015610a0e5781810151838201526020016109f6565b8381111561066b5750506000910152565b60008251610a318184602087016109f3565b9190910192915050565b6020815260008251806020840152610a5a8160408501602087016109f3565b601f01601f1916919091016040019291505056fea2646970667358221220f434ab00043d895f70b777dbc3d2b90244ba2004f042a55d3494310dc78ef28564736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_governor": "Address of governor",
          "_wKP3R": "Address of wrapped KP3R implementation"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "The amount of wKP3R to deposit"
        }
      },
      "mint(uint256)": {
        "params": {
          "_amount": "The amount of wKP3R to mint"
        }
      },
      "sendDust(address,uint256,address)": {
        "params": {
          "_amount": "The amont of the token that will be transferred",
          "_to": "The address that will receive the idle funds",
          "_token": "The token that will be transferred"
        }
      },
      "setMinter(address)": {
        "params": {
          "_minter": "The address set as the minter"
        }
      },
      "setPendingGovernor(address)": {
        "params": {
          "_pendingGovernor": "Address of the proposed new governor"
        }
      },
      "setWKP3R(address)": {
        "params": {
          "_wKP3R": "the wKP3R address"
        }
      }
    },
    "stateVariables": {
      "wKP3R": {
        "return": "_wKP3RAddress The address of wKP3R",
        "returns": {
          "_0": "_wKP3RAddress The address of wKP3R"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InsufficientBalance()": [
        {
          "notice": "Throws when minter attempts to withdraw more wKP3R than the escrow has in its balance"
        }
      ],
      "InvalidAddress()": [
        {
          "notice": "Thrown if an address is invalid"
        }
      ],
      "InvalidAmount()": [
        {
          "notice": "Thrown if an amount is invalid"
        }
      ],
      "LengthMismatch()": [
        {
          "notice": "Thrown if the lengths of a set of lists mismatch"
        }
      ],
      "OnlyGovernor()": [
        {
          "notice": "Thrown if a non-governor user tries to call a OnlyGovernor function"
        }
      ],
      "OnlyMinter()": [
        {
          "notice": "Throws if the caller of the function is not the minter"
        }
      ],
      "OnlyPendingGovernor()": [
        {
          "notice": "Thrown if a non-pending-governor user tries to call a OnlyPendingGovernor function"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Thrown if an address is the zero address"
        }
      ],
      "ZeroAmount()": [
        {
          "notice": "Thrown if an amount is zero"
        }
      ]
    },
    "events": {
      "DustSent(address,uint256,address)": {
        "notice": "Emitted when dust is sent"
      },
      "MinterSet(address)": {
        "notice": "Emitted when governor sets a new minter"
      },
      "PendingGovernorAccepted(address)": {
        "notice": "Emitted when a new governor is set"
      },
      "PendingGovernorSet(address,address)": {
        "notice": "Emitted when a new pending governor is set"
      },
      "wKP3RDeposited(address,address,uint256)": {
        "notice": "Emitted when Keep3rEscrow#deposit function is called"
      },
      "wKP3RMinted(address,address,uint256)": {
        "notice": "Emitted when Keep3rEscrow#mint function is called"
      },
      "wKP3RSet(address)": {
        "notice": "Emitted when Keep3rEscrow#setWKP3R function is called"
      }
    },
    "kind": "user",
    "methods": {
      "acceptPendingGovernor()": {
        "notice": "Allows a proposed governor to accept the governance"
      },
      "deposit(uint256)": {
        "notice": "Deposits wKP3R into the contract"
      },
      "mint(uint256)": {
        "notice": "mints wKP3R to the recipient"
      },
      "minter()": {
        "notice": "Stores the minter address"
      },
      "sendDust(address,uint256,address)": {
        "notice": "Allows an authorized user to transfer the tokens or eth that may have been left in a contract"
      },
      "setMinter(address)": {
        "notice": "Sets a new address to be the minter"
      },
      "setPendingGovernor(address)": {
        "notice": "Allows a governor to propose a new governor"
      },
      "setWKP3R(address)": {
        "notice": "sets the wKP3R address"
      },
      "wKP3R()": {
        "notice": "Lists the address of the wKP3R contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 82,
        "contract": "solidity/contracts/sidechain/Keep3rEscrow.sol:Keep3rEscrow",
        "label": "governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 85,
        "contract": "solidity/contracts/sidechain/Keep3rEscrow.sol:Keep3rEscrow",
        "label": "pendingGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6322,
        "contract": "solidity/contracts/sidechain/Keep3rEscrow.sol:Keep3rEscrow",
        "label": "minter",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9775,
        "contract": "solidity/contracts/sidechain/Keep3rEscrow.sol:Keep3rEscrow",
        "label": "wKP3R",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}
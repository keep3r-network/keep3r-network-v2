{
  "language": "Solidity",
  "sources": {
    "solidity/contracts/Keep3r.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/*\n\nCoded for The Keep3r Network with ♥ by\n\n██████╗░███████╗███████╗██╗  ░██╗░░░░░░░██╗░█████╗░███╗░░██╗██████╗░███████╗██████╗░██╗░░░░░░█████╗░███╗░░██╗██████╗░\n██╔══██╗██╔════╝██╔════╝██║  ░██║░░██╗░░██║██╔══██╗████╗░██║██╔══██╗██╔════╝██╔══██╗██║░░░░░██╔══██╗████╗░██║██╔══██╗\n██║░░██║█████╗░░█████╗░░██║  ░╚██╗████╗██╔╝██║░░██║██╔██╗██║██║░░██║█████╗░░██████╔╝██║░░░░░███████║██╔██╗██║██║░░██║\n██║░░██║██╔══╝░░██╔══╝░░██║  ░░████╔═████║░██║░░██║██║╚████║██║░░██║██╔══╝░░██╔══██╗██║░░░░░██╔══██║██║╚████║██║░░██║\n██████╔╝███████╗██║░░░░░██║  ░░╚██╔╝░╚██╔╝░╚█████╔╝██║░╚███║██████╔╝███████╗██║░░██║███████╗██║░░██║██║░╚███║██████╔╝\n╚═════╝░╚══════╝╚═╝░░░░░╚═╝  ░░░╚═╝░░░╚═╝░░░╚════╝░╚═╝░░╚══╝╚═════╝░╚══════╝╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝╚═╝░░╚══╝╚═════╝░\n\nhttps://defi.sucks\n\n*/\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport './peripherals/jobs/Keep3rJobs.sol';\nimport './peripherals/keepers/Keep3rKeepers.sol';\nimport './peripherals/Keep3rAccountance.sol';\nimport './peripherals/Keep3rRoles.sol';\nimport './peripherals/Keep3rParameters.sol';\nimport './peripherals/DustCollector.sol';\n\ncontract Keep3r is DustCollector, Keep3rJobs, Keep3rKeepers {\n  constructor(\n    address _governance,\n    address _keep3rHelper,\n    address _keep3rV1,\n    address _keep3rV1Proxy,\n    address _kp3rWethPool\n  ) Keep3rParameters(_keep3rHelper, _keep3rV1, _keep3rV1Proxy, _kp3rWethPool) Keep3rRoles(_governance) DustCollector() {}\n}\n"
    },
    "solidity/contracts/peripherals/jobs/Keep3rJobs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './Keep3rJobDisputable.sol';\nimport './Keep3rJobWorkable.sol';\nimport './Keep3rJobManager.sol';\n\nabstract contract Keep3rJobs is Keep3rJobDisputable, Keep3rJobManager, Keep3rJobWorkable {}\n"
    },
    "solidity/contracts/peripherals/keepers/Keep3rKeepers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './Keep3rKeeperDisputable.sol';\n\nabstract contract Keep3rKeepers is Keep3rKeeperDisputable {}\n"
    },
    "solidity/contracts/peripherals/Keep3rAccountance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport '../../interfaces/peripherals/IKeep3rAccountance.sol';\n\nabstract contract Keep3rAccountance is IKeep3rAccountance {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  /// @notice List of all enabled keepers\n  EnumerableSet.AddressSet internal _keepers;\n\n  /// @inheritdoc IKeep3rAccountance\n  mapping(address => uint256) public override workCompleted;\n\n  /// @inheritdoc IKeep3rAccountance\n  mapping(address => uint256) public override firstSeen;\n\n  /// @inheritdoc IKeep3rAccountance\n  mapping(address => bool) public override disputes;\n\n  /// @inheritdoc IKeep3rAccountance\n  /// @notice Mapping (job => bonding => amount)\n  mapping(address => mapping(address => uint256)) public override bonds;\n\n  /// @inheritdoc IKeep3rAccountance\n  mapping(address => mapping(address => uint256)) public override jobTokenCredits;\n\n  /// @notice The current liquidity credits available for a job\n  mapping(address => uint256) internal _jobLiquidityCredits;\n\n  /// @notice Map the address of a job to its correspondent periodCredits\n  mapping(address => uint256) internal _jobPeriodCredits;\n\n  /// @notice Enumerable array of Job Tokens for Credits\n  mapping(address => EnumerableSet.AddressSet) internal _jobTokens;\n\n  /// @notice List of liquidities that a job has (job => liquidities)\n  mapping(address => EnumerableSet.AddressSet) internal _jobLiquidities;\n\n  /// @notice Liquidity pool to observe\n  mapping(address => address) internal _liquidityPool;\n\n  /// @notice Tracks if a pool has KP3R as token0\n  mapping(address => bool) internal _isKP3RToken0;\n\n  /// @inheritdoc IKeep3rAccountance\n  mapping(address => mapping(address => uint256)) public override pendingBonds;\n\n  /// @inheritdoc IKeep3rAccountance\n  mapping(address => mapping(address => uint256)) public override canActivateAfter;\n\n  /// @inheritdoc IKeep3rAccountance\n  mapping(address => mapping(address => uint256)) public override canWithdrawAfter;\n\n  /// @inheritdoc IKeep3rAccountance\n  mapping(address => mapping(address => uint256)) public override pendingUnbonds;\n\n  /// @inheritdoc IKeep3rAccountance\n  mapping(address => bool) public override hasBonded;\n\n  /// @notice List of all enabled jobs\n  EnumerableSet.AddressSet internal _jobs;\n\n  /// @inheritdoc IKeep3rAccountance\n  function jobs() external view override returns (address[] memory _list) {\n    _list = _jobs.values();\n  }\n\n  /// @inheritdoc IKeep3rAccountance\n  function keepers() external view override returns (address[] memory _list) {\n    _list = _keepers.values();\n  }\n}\n"
    },
    "solidity/contracts/peripherals/Keep3rRoles.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../interfaces/peripherals/IKeep3rRoles.sol';\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\nimport './Governable.sol';\n\ncontract Keep3rRoles is IKeep3rRoles, Governable {\n  /// @inheritdoc IKeep3rRoles\n  mapping(address => bool) public override slashers;\n\n  /// @inheritdoc IKeep3rRoles\n  mapping(address => bool) public override disputers;\n\n  constructor(address _governance) Governable(_governance) {}\n\n  /// @inheritdoc IKeep3rRoles\n  function addSlasher(address _slasher) external override onlyGovernance {\n    if (slashers[_slasher]) revert SlasherExistent();\n    slashers[_slasher] = true;\n    emit SlasherAdded(_slasher);\n  }\n\n  /// @inheritdoc IKeep3rRoles\n  function removeSlasher(address _slasher) external override onlyGovernance {\n    if (!slashers[_slasher]) revert SlasherUnexistent();\n    delete slashers[_slasher];\n    emit SlasherRemoved(_slasher);\n  }\n\n  /// @inheritdoc IKeep3rRoles\n  function addDisputer(address _disputer) external override onlyGovernance {\n    if (disputers[_disputer]) revert DisputerExistent();\n    disputers[_disputer] = true;\n    emit DisputerAdded(_disputer);\n  }\n\n  /// @inheritdoc IKeep3rRoles\n  function removeDisputer(address _disputer) external override onlyGovernance {\n    if (!disputers[_disputer]) revert DisputerUnexistent();\n    delete disputers[_disputer];\n    emit DisputerRemoved(_disputer);\n  }\n\n  /// @notice Functions with this modifier can only be called by either a slasher or governance\n  modifier onlySlasher {\n    if (!slashers[msg.sender]) revert OnlySlasher();\n    _;\n  }\n\n  /// @notice Functions with this modifier can only be called by either a disputer or governance\n  modifier onlyDisputer {\n    if (!disputers[msg.sender]) revert OnlyDisputer();\n    _;\n  }\n}\n"
    },
    "solidity/contracts/peripherals/Keep3rParameters.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../interfaces/IKeep3rHelper.sol';\nimport '../../interfaces/peripherals/IKeep3rParameters.sol';\nimport './Keep3rAccountance.sol';\nimport './Keep3rRoles.sol';\n\nabstract contract Keep3rParameters is IKeep3rParameters, Keep3rAccountance, Keep3rRoles {\n  /// @inheritdoc IKeep3rParameters\n  address public override keep3rV1;\n\n  /// @inheritdoc IKeep3rParameters\n  address public override keep3rV1Proxy;\n\n  /// @inheritdoc IKeep3rParameters\n  address public override keep3rHelper;\n\n  /// @inheritdoc IKeep3rParameters\n  address public override kp3rWethPool;\n\n  /// @inheritdoc IKeep3rParameters\n  uint256 public override bondTime = 3 days;\n\n  /// @inheritdoc IKeep3rParameters\n  uint256 public override unbondTime = 14 days;\n\n  /// @inheritdoc IKeep3rParameters\n  uint256 public override liquidityMinimum = 3 ether;\n\n  /// @inheritdoc IKeep3rParameters\n  uint256 public override rewardPeriodTime = 5 days;\n\n  /// @inheritdoc IKeep3rParameters\n  uint256 public override inflationPeriod = 34 days;\n\n  /// @inheritdoc IKeep3rParameters\n  uint256 public override fee = 30;\n\n  /// @notice The base that will be used to calculate the fee\n  uint256 internal constant _BASE = 10_000;\n\n  /// @notice The minimum reward period\n  uint256 internal constant _MIN_REWARD_PERIOD_TIME = 1 days;\n\n  constructor(\n    address _keep3rHelper,\n    address _keep3rV1,\n    address _keep3rV1Proxy,\n    address _kp3rWethPool\n  ) {\n    keep3rHelper = _keep3rHelper;\n    keep3rV1 = _keep3rV1;\n    keep3rV1Proxy = _keep3rV1Proxy;\n    kp3rWethPool = _kp3rWethPool;\n    _liquidityPool[kp3rWethPool] = kp3rWethPool;\n    _isKP3RToken0[_kp3rWethPool] = IKeep3rHelper(keep3rHelper).isKP3RToken0(kp3rWethPool);\n  }\n\n  /// @inheritdoc IKeep3rParameters\n  function setKeep3rHelper(address _keep3rHelper) external override onlyGovernance {\n    if (_keep3rHelper == address(0)) revert ZeroAddress();\n    keep3rHelper = _keep3rHelper;\n    emit Keep3rHelperChange(_keep3rHelper);\n  }\n\n  /// @inheritdoc IKeep3rParameters\n  function setKeep3rV1(address _keep3rV1) external override onlyGovernance {\n    if (_keep3rV1 == address(0)) revert ZeroAddress();\n    keep3rV1 = _keep3rV1;\n    emit Keep3rV1Change(_keep3rV1);\n  }\n\n  /// @inheritdoc IKeep3rParameters\n  function setKeep3rV1Proxy(address _keep3rV1Proxy) external override onlyGovernance {\n    if (_keep3rV1Proxy == address(0)) revert ZeroAddress();\n    keep3rV1Proxy = _keep3rV1Proxy;\n    emit Keep3rV1ProxyChange(_keep3rV1Proxy);\n  }\n\n  /// @inheritdoc IKeep3rParameters\n  function setKp3rWethPool(address _kp3rWethPool) external override onlyGovernance {\n    if (_kp3rWethPool == address(0)) revert ZeroAddress();\n    kp3rWethPool = _kp3rWethPool;\n    _liquidityPool[kp3rWethPool] = kp3rWethPool;\n    _isKP3RToken0[_kp3rWethPool] = IKeep3rHelper(keep3rHelper).isKP3RToken0(_kp3rWethPool);\n    emit Kp3rWethPoolChange(_kp3rWethPool);\n  }\n\n  /// @inheritdoc IKeep3rParameters\n  function setBondTime(uint256 _bondTime) external override onlyGovernance {\n    bondTime = _bondTime;\n    emit BondTimeChange(_bondTime);\n  }\n\n  /// @inheritdoc IKeep3rParameters\n  function setUnbondTime(uint256 _unbondTime) external override onlyGovernance {\n    unbondTime = _unbondTime;\n    emit UnbondTimeChange(_unbondTime);\n  }\n\n  /// @inheritdoc IKeep3rParameters\n  function setLiquidityMinimum(uint256 _liquidityMinimum) external override onlyGovernance {\n    liquidityMinimum = _liquidityMinimum;\n    emit LiquidityMinimumChange(_liquidityMinimum);\n  }\n\n  /// @inheritdoc IKeep3rParameters\n  // TODO: check what happens to credit minting when changing this. Shouldn't we update the cached ticks?\n  function setRewardPeriodTime(uint256 _rewardPeriodTime) external override onlyGovernance {\n    if (_rewardPeriodTime < _MIN_REWARD_PERIOD_TIME) revert MinRewardPeriod();\n    rewardPeriodTime = _rewardPeriodTime;\n    emit RewardPeriodTimeChange(_rewardPeriodTime);\n  }\n\n  /// @inheritdoc IKeep3rParameters\n  function setInflationPeriod(uint256 _inflationPeriod) external override onlyGovernance {\n    inflationPeriod = _inflationPeriod;\n    emit InflationPeriodChange(_inflationPeriod);\n  }\n\n  /// @inheritdoc IKeep3rParameters\n  function setFee(uint256 _fee) external override onlyGovernance {\n    fee = _fee;\n    emit FeeChange(_fee);\n  }\n}\n"
    },
    "solidity/contracts/peripherals/DustCollector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '../../contracts/peripherals/Governable.sol';\nimport '../../interfaces/peripherals/IDustCollector.sol';\n\nabstract contract DustCollector is IDustCollector, Governable {\n  using SafeERC20 for IERC20;\n\n  address internal constant _ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  function sendDust(\n    address _token,\n    uint256 _amount,\n    address _to\n  ) external override onlyGovernance {\n    if (_to == address(0)) revert ZeroAddress();\n    if (_token == _ETH_ADDRESS) {\n      payable(_to).transfer(_amount);\n    } else {\n      IERC20(_token).safeTransfer(_to, _amount);\n    }\n    emit DustSent(_token, _amount, _to);\n  }\n}\n"
    },
    "solidity/contracts/peripherals/jobs/Keep3rJobDisputable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './Keep3rJobFundableCredits.sol';\nimport './Keep3rJobFundableLiquidity.sol';\nimport '../Keep3rDisputable.sol';\n\nabstract contract Keep3rJobDisputable is IKeep3rJobDisputable, Keep3rDisputable, Keep3rJobFundableCredits, Keep3rJobFundableLiquidity {\n  using EnumerableSet for EnumerableSet.AddressSet;\n  using SafeERC20 for IERC20;\n\n  /// @inheritdoc IKeep3rJobDisputable\n  function slashTokenFromJob(\n    address _job,\n    address _token,\n    uint256 _amount\n  ) external override onlySlasher {\n    if (!disputes[_job]) revert NotDisputed();\n    if (!_jobTokens[_job].contains(_token)) revert JobTokenUnexistent();\n    if (jobTokenCredits[_job][_token] < _amount) revert JobTokenInsufficient();\n\n    try IERC20(_token).transfer(governance, _amount) {} catch {}\n    jobTokenCredits[_job][_token] -= _amount;\n    if (jobTokenCredits[_job][_token] == 0) {\n      _jobTokens[_job].remove(_token);\n    }\n\n    emit JobSlashToken(_job, _token, msg.sender, _amount);\n  }\n\n  /// @inheritdoc IKeep3rJobDisputable\n  function slashLiquidityFromJob(\n    address _job,\n    address _liquidity,\n    uint256 _amount\n  ) external override onlySlasher {\n    if (!disputes[_job]) revert NotDisputed();\n\n    _unbondLiquidityFromJob(_job, _liquidity, _amount);\n    try IERC20(_liquidity).transfer(governance, _amount) {} catch {}\n    emit JobSlashLiquidity(_job, _liquidity, msg.sender, _amount);\n  }\n}\n"
    },
    "solidity/contracts/peripherals/jobs/Keep3rJobWorkable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './Keep3rJobMigration.sol';\nimport '../../../interfaces/IKeep3rHelper.sol';\nimport '../../../interfaces/peripherals/IKeep3rJobs.sol';\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nabstract contract Keep3rJobWorkable is IKeep3rJobWorkable, Keep3rJobMigration {\n  using EnumerableSet for EnumerableSet.AddressSet;\n  using SafeERC20 for IERC20;\n\n  uint256 internal _initialGas;\n\n  /// @inheritdoc IKeep3rJobWorkable\n  function isKeeper(address _keeper) external override returns (bool _isKeeper) {\n    _initialGas = _getGasLeft();\n    if (_keepers.contains(_keeper)) {\n      emit KeeperValidation(_initialGas);\n      return true;\n    }\n  }\n\n  /// @inheritdoc IKeep3rJobWorkable\n  function isBondedKeeper(\n    address _keeper,\n    address _bond,\n    uint256 _minBond,\n    uint256 _earned,\n    uint256 _age\n  ) public override returns (bool _isBondedKeeper) {\n    _initialGas = _getGasLeft();\n    if (\n      _keepers.contains(_keeper) &&\n      bonds[_keeper][_bond] >= _minBond &&\n      workCompleted[_keeper] >= _earned &&\n      block.timestamp - firstSeen[_keeper] >= _age\n    ) {\n      emit KeeperValidation(_initialGas);\n      return true;\n    }\n  }\n\n  /// @inheritdoc IKeep3rJobWorkable\n  function worked(address _keeper) external override {\n    address _job = msg.sender;\n    if (disputes[_job]) revert JobDisputed();\n    if (!_jobs.contains(_job)) revert JobUnapproved();\n\n    if (_updateJobCreditsIfNeeded(_job)) {\n      emit LiquidityCreditsReward(_job, rewardedAt[_job], _jobLiquidityCredits[_job], _jobPeriodCredits[_job]);\n    }\n\n    (uint256 _boost, uint256 _oneEthQuote, uint256 _extraGas) = IKeep3rHelper(keep3rHelper).getPaymentParams(bonds[_keeper][keep3rV1]);\n\n    uint256 _gasLeft = _getGasLeft();\n    uint256 _payment = _calculatePayment(_gasLeft, _extraGas, _oneEthQuote, _boost);\n\n    if (_payment > _jobLiquidityCredits[_job]) {\n      _rewardJobCredits(_job);\n      emit LiquidityCreditsReward(_job, rewardedAt[_job], _jobLiquidityCredits[_job], _jobPeriodCredits[_job]);\n\n      _gasLeft = _getGasLeft();\n      _payment = _calculatePayment(_gasLeft, _extraGas, _oneEthQuote, _boost);\n    }\n\n    _bondedPayment(_job, _keeper, _payment);\n    emit KeeperWork(keep3rV1, _job, _keeper, _payment, _gasLeft);\n  }\n\n  /// @inheritdoc IKeep3rJobWorkable\n  function bondedPayment(address _keeper, uint256 _payment) public override {\n    address _job = msg.sender;\n\n    if (disputes[_job]) revert JobDisputed();\n    if (!_jobs.contains(_job)) revert JobUnapproved();\n\n    if (_updateJobCreditsIfNeeded(_job)) {\n      emit LiquidityCreditsReward(_job, rewardedAt[_job], _jobLiquidityCredits[_job], _jobPeriodCredits[_job]);\n    }\n\n    if (_payment > _jobLiquidityCredits[_job]) {\n      _rewardJobCredits(_job);\n      emit LiquidityCreditsReward(_job, rewardedAt[_job], _jobLiquidityCredits[_job], _jobPeriodCredits[_job]);\n    }\n\n    _bondedPayment(_job, _keeper, _payment);\n    emit KeeperWork(keep3rV1, _job, _keeper, _payment, _getGasLeft());\n  }\n\n  /// @inheritdoc IKeep3rJobWorkable\n  function directTokenPayment(\n    address _token,\n    address _keeper,\n    uint256 _amount\n  ) external override {\n    address _job = msg.sender;\n\n    if (disputes[_job]) revert JobDisputed();\n    if (disputes[_keeper]) revert Disputed();\n    if (!_jobs.contains(_job)) revert JobUnapproved();\n    if (jobTokenCredits[_job][_token] < _amount) revert InsufficientFunds();\n    jobTokenCredits[_job][_token] -= _amount;\n    IERC20(_token).safeTransfer(_keeper, _amount);\n    emit KeeperWork(_token, _job, _keeper, _amount, _getGasLeft());\n  }\n\n  function _bondedPayment(\n    address _job,\n    address _keeper,\n    uint256 _payment\n  ) internal {\n    if (_payment > _jobLiquidityCredits[_job]) revert InsufficientFunds();\n\n    workedAt[_job] = block.timestamp;\n    _jobLiquidityCredits[_job] -= _payment;\n    bonds[_keeper][keep3rV1] += _payment;\n    workCompleted[_keeper] += _payment;\n  }\n\n  /// @notice Calculate amount to be payed in KP3R, taking into account multiple parameters\n  /// @param _gasLeft Amount of gas left after working the job\n  /// @param _extraGas Amount of expected unaccounted gas\n  /// @param _oneEthQuote Amount of KP3R equivalent to 1 ETH\n  /// @param _boost Reward given to the keeper for having bonded KP3R tokens\n  /// @return _payment Amount to be payed in KP3R tokens\n  function _calculatePayment(\n    uint256 _gasLeft,\n    uint256 _extraGas,\n    uint256 _oneEthQuote,\n    uint256 _boost\n  ) internal view returns (uint256 _payment) {\n    uint256 _accountedGas = _initialGas - _gasLeft + _extraGas;\n    _payment = (((_accountedGas * _boost) / _BASE) * _oneEthQuote) / 1 ether;\n  }\n\n  /// @notice Return the gas left and add 1/64 in order to match real gas left at first level of depth (EIP-150)\n  /// @return _gasLeft Amount of gas left recording taking into account EIP-150\n  function _getGasLeft() internal view returns (uint256 _gasLeft) {\n    _gasLeft = (gasleft() * 64) / 63;\n  }\n}\n"
    },
    "solidity/contracts/peripherals/jobs/Keep3rJobManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './Keep3rJobOwnership.sol';\nimport '../Keep3rRoles.sol';\nimport '../Keep3rParameters.sol';\nimport '../../../interfaces/peripherals/IKeep3rJobs.sol';\n\nabstract contract Keep3rJobManager is IKeep3rJobManager, Keep3rJobOwnership, Keep3rRoles, Keep3rParameters {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  /// @inheritdoc IKeep3rJobManager\n  function addJob(address _job) external override {\n    if (_jobs.contains(_job)) revert JobAlreadyAdded();\n    if (hasBonded[_job]) revert AlreadyAKeeper();\n    _jobs.add(_job);\n    jobOwner[_job] = msg.sender;\n    emit JobAddition(msg.sender, _job);\n  }\n}\n"
    },
    "solidity/contracts/peripherals/jobs/Keep3rJobFundableCredits.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './Keep3rJobOwnership.sol';\nimport '../Keep3rAccountance.sol';\nimport '../Keep3rParameters.sol';\nimport '../../../interfaces/peripherals/IKeep3rJobs.sol';\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/math/Math.sol';\n\nabstract contract Keep3rJobFundableCredits is IKeep3rJobFundableCredits, ReentrancyGuard, Keep3rJobOwnership, Keep3rParameters {\n  using EnumerableSet for EnumerableSet.AddressSet;\n  using SafeERC20 for IERC20;\n\n  /// @notice Cooldown between withdrawals\n  uint256 internal constant _WITHDRAW_TOKENS_COOLDOWN = 1 minutes;\n\n  /// @inheritdoc IKeep3rJobFundableCredits\n  mapping(address => mapping(address => uint256)) public override jobTokenCreditsAddedAt;\n\n  /// @inheritdoc IKeep3rJobFundableCredits\n  function addTokenCreditsToJob(\n    address _job,\n    address _token,\n    uint256 _amount\n  ) external override nonReentrant {\n    if (!_jobs.contains(_job)) revert JobUnavailable();\n    // KP3R shouldn't be used for direct token payments\n    if (_token == keep3rV1) revert TokenUnallowed();\n    uint256 _before = IERC20(_token).balanceOf(address(this));\n    IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n    uint256 _received = IERC20(_token).balanceOf(address(this)) - _before;\n    uint256 _tokenFee = (_received * fee) / _BASE;\n    jobTokenCredits[_job][_token] += _received - _tokenFee;\n    jobTokenCreditsAddedAt[_job][_token] = block.timestamp;\n    IERC20(_token).safeTransfer(governance, _tokenFee);\n    _jobTokens[_job].add(_token);\n\n    emit TokenCreditAddition(_job, _token, msg.sender, _received);\n  }\n\n  /// @inheritdoc IKeep3rJobFundableCredits\n  function withdrawTokenCreditsFromJob(\n    address _job,\n    address _token,\n    uint256 _amount,\n    address _receiver\n  ) external override nonReentrant onlyJobOwner(_job) {\n    if (block.timestamp <= jobTokenCreditsAddedAt[_job][_token] + _WITHDRAW_TOKENS_COOLDOWN) revert JobTokenCreditsLocked();\n    if (jobTokenCredits[_job][_token] < _amount) revert InsufficientJobTokenCredits();\n    if (disputes[_job]) revert JobDisputed();\n\n    jobTokenCredits[_job][_token] -= _amount;\n    IERC20(_token).safeTransfer(_receiver, _amount);\n\n    if (jobTokenCredits[_job][_token] == 0) {\n      _jobTokens[_job].remove(_token);\n    }\n\n    emit TokenCreditWithdrawal(_job, _token, _receiver, _amount);\n  }\n}\n"
    },
    "solidity/contracts/peripherals/jobs/Keep3rJobFundableLiquidity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './Keep3rJobOwnership.sol';\nimport '../Keep3rAccountance.sol';\nimport '../Keep3rParameters.sol';\nimport '../../../interfaces/IPairManager.sol';\nimport '../../../interfaces/peripherals/IKeep3rJobs.sol';\n\nimport '../../libraries/FullMath.sol';\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/math/Math.sol';\n\nabstract contract Keep3rJobFundableLiquidity is IKeep3rJobFundableLiquidity, ReentrancyGuard, Keep3rJobOwnership, Keep3rParameters {\n  using EnumerableSet for EnumerableSet.AddressSet;\n  using SafeERC20 for IERC20;\n\n  /// @notice List of liquidities that are accepted in the system\n  EnumerableSet.AddressSet internal _approvedLiquidities;\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  mapping(address => mapping(address => uint256)) public override liquidityAmount;\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  mapping(address => uint256) public override rewardedAt;\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  mapping(address => uint256) public override workedAt;\n\n  /// @notice Tracks an address and returns its TickCache\n  mapping(address => TickCache) internal _tick;\n\n  // Views\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  function approvedLiquidities() external view override returns (address[] memory _list) {\n    _list = _approvedLiquidities.values();\n  }\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  function jobPeriodCredits(address _job) public view override returns (uint256 _periodCredits) {\n    for (uint256 i; i < _jobLiquidities[_job].length(); i++) {\n      address _liquidity = _jobLiquidities[_job].at(i);\n      if (_approvedLiquidities.contains(_liquidity)) {\n        TickCache memory _tickCache = observeLiquidity(_liquidity);\n        if (_tickCache.period != 0) {\n          int56 _tickDifference = _isKP3RToken0[_liquidity] ? _tickCache.difference : -_tickCache.difference;\n          _periodCredits += _getReward(\n            IKeep3rHelper(keep3rHelper).getKP3RsAtTick(liquidityAmount[_job][_liquidity], _tickDifference, rewardPeriodTime)\n          );\n        }\n      }\n    }\n  }\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  function jobLiquidityCredits(address _job) public view override returns (uint256 _liquidityCredits) {\n    uint256 _periodCredits = jobPeriodCredits(_job);\n\n    // If the job was rewarded in the past 1 period time\n    if ((block.timestamp - rewardedAt[_job]) < rewardPeriodTime) {\n      // If the job has period credits, update minted job credits to new twap\n      _liquidityCredits = _periodCredits > 0\n        ? (_jobLiquidityCredits[_job] * _periodCredits) / _jobPeriodCredits[_job] // If the job has period credits, return remaining job credits updated to new twap\n        : _jobLiquidityCredits[_job]; // If not, return remaining credits, forced credits should not be updated\n    } else {\n      // Else return a full period worth of credits if current credits have expired\n      _liquidityCredits = _periodCredits;\n    }\n  }\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  function totalJobCredits(address _job) external view override returns (uint256 _credits) {\n    uint256 _periodCredits = jobPeriodCredits(_job);\n    uint256 _cooldown = block.timestamp;\n\n    if ((rewardedAt[_job] > _period(block.timestamp - rewardPeriodTime))) {\n      // Will calculate cooldown if it outdated\n      if ((block.timestamp - rewardedAt[_job]) >= rewardPeriodTime) {\n        // Will calculate cooldown from last reward reference in this period\n        _cooldown -= (rewardedAt[_job] + rewardPeriodTime);\n      } else {\n        // Will calculate cooldown from last reward timestamp\n        _cooldown -= rewardedAt[_job];\n      }\n    } else {\n      // Will calculate cooldown from period start if expired\n      _cooldown -= _period(block.timestamp);\n    }\n    _credits = jobLiquidityCredits(_job) + _phase(_cooldown, _periodCredits);\n  }\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  function quoteLiquidity(address _liquidity, uint256 _amount) external view override returns (uint256 _periodCredits) {\n    if (_approvedLiquidities.contains(_liquidity)) {\n      TickCache memory _tickCache = observeLiquidity(_liquidity);\n      if (_tickCache.period != 0) {\n        int56 _tickDifference = _isKP3RToken0[_liquidity] ? _tickCache.difference : -_tickCache.difference;\n        return _getReward(IKeep3rHelper(keep3rHelper).getKP3RsAtTick(_amount, _tickDifference, rewardPeriodTime));\n      }\n    }\n  }\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  function observeLiquidity(address _liquidity) public view override returns (TickCache memory _tickCache) {\n    if (_tick[_liquidity].period == _period(block.timestamp)) {\n      // Will return cached twaps if liquidity is updated\n      _tickCache = _tick[_liquidity];\n    } else {\n      bool success;\n      uint256 lastPeriod = _period(block.timestamp - rewardPeriodTime);\n\n      if (_tick[_liquidity].period == lastPeriod) {\n        // Will only ask for current period accumulator if liquidity is outdated\n        uint32[] memory _secondsAgo = new uint32[](1);\n        int56 previousTick = _tick[_liquidity].current;\n\n        _secondsAgo[0] = uint32(block.timestamp - _period(block.timestamp));\n\n        (_tickCache.current, , success) = IKeep3rHelper(keep3rHelper).observe(_liquidityPool[_liquidity], _secondsAgo);\n\n        _tickCache.difference = _tickCache.current - previousTick;\n      } else if (_tick[_liquidity].period < lastPeriod) {\n        // Will ask for 2 accumulators if liquidity is expired\n        uint32[] memory _secondsAgo = new uint32[](2);\n\n        _secondsAgo[0] = uint32(block.timestamp - _period(block.timestamp));\n        _secondsAgo[1] = uint32(block.timestamp - _period(block.timestamp) + rewardPeriodTime);\n\n        int56 _tickCumulative2;\n        (_tickCache.current, _tickCumulative2, success) = IKeep3rHelper(keep3rHelper).observe(_liquidityPool[_liquidity], _secondsAgo);\n\n        _tickCache.difference = _tickCache.current - _tickCumulative2;\n      }\n      if (success) {\n        _tickCache.period = _period(block.timestamp);\n      } else {\n        delete _tickCache.period;\n      }\n    }\n  }\n\n  // Methods\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  function forceLiquidityCreditsToJob(address _job, uint256 _amount) external override onlyGovernance {\n    if (!_jobs.contains(_job)) revert JobUnavailable();\n    _settleJobAccountance(_job);\n    _jobLiquidityCredits[_job] += _amount;\n    emit LiquidityCreditsForced(_job, rewardedAt[_job], _jobLiquidityCredits[_job]);\n  }\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  function approveLiquidity(address _liquidity) external override onlyGovernance {\n    if (!_approvedLiquidities.add(_liquidity)) revert LiquidityPairApproved();\n    _liquidityPool[_liquidity] = IPairManager(_liquidity).pool();\n    _isKP3RToken0[_liquidity] = IKeep3rHelper(keep3rHelper).isKP3RToken0(_liquidityPool[_liquidity]);\n    _tick[_liquidity] = observeLiquidity(_liquidity);\n    emit LiquidityApproval(_liquidity);\n  }\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  function revokeLiquidity(address _liquidity) external override onlyGovernance {\n    if (!_approvedLiquidities.remove(_liquidity)) revert LiquidityPairUnexistent();\n    emit LiquidityRevocation(_liquidity);\n  }\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  function addLiquidityToJob(\n    address _job,\n    address _liquidity,\n    uint256 _amount\n  ) external override nonReentrant {\n    if (!_approvedLiquidities.contains(_liquidity)) revert LiquidityPairUnapproved();\n    if (!_jobs.contains(_job)) revert JobUnavailable();\n\n    _jobLiquidities[_job].add(_liquidity);\n\n    _settleJobAccountance(_job);\n\n    if (_quoteLiquidity(liquidityAmount[_job][_liquidity] + _amount, _liquidity) < liquidityMinimum) revert JobLiquidityLessThanMin();\n\n    emit LiquidityCreditsReward(_job, rewardedAt[_job], _jobLiquidityCredits[_job], _jobPeriodCredits[_job]);\n\n    IERC20(_liquidity).safeTransferFrom(msg.sender, address(this), _amount);\n    liquidityAmount[_job][_liquidity] += _amount;\n    _jobPeriodCredits[_job] += _getReward(_quoteLiquidity(_amount, _liquidity));\n    emit LiquidityAddition(_job, _liquidity, msg.sender, _amount);\n  }\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  function unbondLiquidityFromJob(\n    address _job,\n    address _liquidity,\n    uint256 _amount\n  ) external override onlyJobOwner(_job) {\n    canWithdrawAfter[_job][_liquidity] = block.timestamp + unbondTime;\n    pendingUnbonds[_job][_liquidity] += _amount;\n    _unbondLiquidityFromJob(_job, _liquidity, _amount);\n\n    uint256 _remainingLiquidity = liquidityAmount[_job][_liquidity];\n    if (_remainingLiquidity > 0 && _quoteLiquidity(_remainingLiquidity, _liquidity) < liquidityMinimum) revert JobLiquidityLessThanMin();\n\n    emit Unbonding(_job, _liquidity, _amount);\n  }\n\n  /// @inheritdoc IKeep3rJobFundableLiquidity\n  function withdrawLiquidityFromJob(\n    address _job,\n    address _liquidity,\n    address _receiver\n  ) external override onlyJobOwner(_job) {\n    if (_receiver == address(0)) revert ZeroAddress();\n    if (pendingUnbonds[_job][_liquidity] == 0) revert UnbondsUnexistent();\n    if (canWithdrawAfter[_job][_liquidity] >= block.timestamp) revert UnbondsLocked();\n    if (disputes[_job]) revert Disputed();\n\n    uint256 _amount = pendingUnbonds[_job][_liquidity];\n\n    delete pendingUnbonds[_job][_liquidity];\n    delete canWithdrawAfter[_job][_liquidity];\n\n    IERC20(_liquidity).safeTransfer(_receiver, _amount);\n    emit LiquidityWithdrawal(_job, _liquidity, _receiver, _amount);\n  }\n\n  // Internal functions\n\n  /// @notice Updates or rewards job liquidity credits depending on time since last job reward\n  function _updateJobCreditsIfNeeded(address _job) internal returns (bool _rewarded) {\n    if (rewardedAt[_job] < _period(block.timestamp)) {\n      // Will exit function if job has been rewarded in current period\n      if (rewardedAt[_job] <= _period(block.timestamp - rewardPeriodTime)) {\n        // Will reset job to period syncronicity if a full period passed without rewards\n        _updateJobPeriod(_job);\n        _jobLiquidityCredits[_job] = _jobPeriodCredits[_job];\n        rewardedAt[_job] = _period(block.timestamp);\n        _rewarded = true;\n      } else if ((block.timestamp - rewardedAt[_job]) >= rewardPeriodTime) {\n        // Will reset job's syncronicity if last reward was more than epoch ago\n        _updateJobPeriod(_job);\n        _jobLiquidityCredits[_job] = _jobPeriodCredits[_job];\n        rewardedAt[_job] += rewardPeriodTime;\n        _rewarded = true;\n      } else if (workedAt[_job] < _period(block.timestamp)) {\n        // First keeper on period has to update job accountance to current twaps\n        uint256 previousPeriodCredits = _jobPeriodCredits[_job];\n        _updateJobPeriod(_job);\n        _jobLiquidityCredits[_job] = (_jobLiquidityCredits[_job] * _jobPeriodCredits[_job]) / previousPeriodCredits;\n        // Updating job accountance does not reward job\n      }\n    }\n  }\n\n  /// @notice Only called if _jobLiquidityCredits < payment\n  function _rewardJobCredits(address _job) internal {\n    /// @notice Only way to += jobLiquidityCredits is when keeper rewarding (cannot pay work)\n    /* WARNING: this allows to top up _jobLiquidityCredits to a max of 1.99 but have to spend at least 1 */\n    _jobLiquidityCredits[_job] += _phase(block.timestamp - rewardedAt[_job], _jobPeriodCredits[_job]);\n    rewardedAt[_job] = block.timestamp;\n  }\n\n  /// @notice Updates accountance for _jobPeriodCredits\n  function _updateJobPeriod(address _job) internal {\n    _jobPeriodCredits[_job] = _calculateJobPeriodCredits(_job);\n  }\n\n  /// @notice Quotes the outdated job liquidities and calculates _periodCredits\n  /// @dev This function is also responsible for keeping the KP3R/WETH quote updated\n  function _calculateJobPeriodCredits(address _job) internal returns (uint256 _periodCredits) {\n    if (_tick[kp3rWethPool].period != _period(block.timestamp)) {\n      // Updates KP3R/WETH quote if needed\n      _tick[kp3rWethPool] = observeLiquidity(kp3rWethPool);\n    }\n\n    for (uint256 i; i < _jobLiquidities[_job].length(); i++) {\n      address _liquidity = _jobLiquidities[_job].at(i);\n      if (_approvedLiquidities.contains(_liquidity)) {\n        if (_tick[_liquidity].period != _period(block.timestamp)) {\n          // Updates liquidity cache only if needed\n          _tick[_liquidity] = observeLiquidity(_liquidity);\n        }\n        _periodCredits += _getReward(_quoteLiquidity(liquidityAmount[_job][_liquidity], _liquidity));\n      }\n    }\n  }\n\n  /// @notice Updates job accountance calculating the impact of the unbonded liquidity amount\n  function _unbondLiquidityFromJob(\n    address _job,\n    address _liquidity,\n    uint256 _amount\n  ) internal nonReentrant {\n    if (!_jobLiquidities[_job].contains(_liquidity)) revert JobLiquidityUnexistent();\n    if (liquidityAmount[_job][_liquidity] < _amount) revert JobLiquidityInsufficient();\n\n    // Ensures current twaps in job liquidities\n    _updateJobPeriod(_job);\n    uint256 _periodCreditsToRemove = _getReward(_quoteLiquidity(_amount, _liquidity));\n\n    // A liquidity can be revoked causing a job to have 0 periodCredits\n    if (_jobPeriodCredits[_job] > 0) {\n      // Removes a % correspondant to a full rewardPeriodTime for the liquidity withdrawn vs all of the liquidities\n      _jobLiquidityCredits[_job] -= (_jobLiquidityCredits[_job] * _periodCreditsToRemove) / _jobPeriodCredits[_job];\n      _jobPeriodCredits[_job] -= _periodCreditsToRemove;\n    }\n\n    liquidityAmount[_job][_liquidity] -= _amount;\n    if (liquidityAmount[_job][_liquidity] == 0) {\n      _jobLiquidities[_job].remove(_liquidity);\n    }\n  }\n\n  /// @notice Returns a fraction of the multiplier or the whole multiplier if equal or more than a rewardPeriodTime has passed\n  function _phase(uint256 _timePassed, uint256 _multiplier) internal view returns (uint256 _result) {\n    if (_timePassed < rewardPeriodTime) {\n      _result = (_timePassed * _multiplier) / rewardPeriodTime;\n    } else _result = _multiplier;\n  }\n\n  /// @notice Returns the start of the period of the provided timestamp\n  function _period(uint256 _timestamp) internal view returns (uint256 _periodTimestamp) {\n    return _timestamp - (_timestamp % rewardPeriodTime);\n  }\n\n  /// @notice Calculates relation between rewardPeriod and inflationPeriod\n  function _getReward(uint256 _baseAmount) internal view returns (uint256 _credits) {\n    return FullMath.mulDiv(_baseAmount, rewardPeriodTime, inflationPeriod);\n  }\n\n  /// @notice Returns underlying KP3R amount for a given liquidity amount\n  function _quoteLiquidity(uint256 _amount, address _liquidity) internal view returns (uint256 _quote) {\n    if (_tick[_liquidity].period != 0) {\n      int56 _tickDifference = _isKP3RToken0[_liquidity] ? _tick[_liquidity].difference : -_tick[_liquidity].difference;\n      _quote = IKeep3rHelper(keep3rHelper).getKP3RsAtTick(_amount, _tickDifference, rewardPeriodTime);\n    }\n  }\n\n  /// @notice Updates job credits to current quotes and rewards job's pending minted credits\n  /// @dev Ensures a maximum of 1 period of credits\n  function _settleJobAccountance(address _job) internal virtual {\n    _updateJobCreditsIfNeeded(_job);\n    _rewardJobCredits(_job);\n    _jobLiquidityCredits[_job] = Math.min(_jobLiquidityCredits[_job], _jobPeriodCredits[_job]);\n  }\n}\n"
    },
    "solidity/contracts/peripherals/Keep3rDisputable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './Keep3rParameters.sol';\nimport './Keep3rRoles.sol';\nimport '../../interfaces/peripherals/IKeep3rDisputable.sol';\n\nabstract contract Keep3rDisputable is IKeep3rDisputable, Keep3rAccountance, Keep3rRoles {\n  /// @inheritdoc IKeep3rDisputable\n  function dispute(address _jobOrKeeper) external override onlyDisputer {\n    if (disputes[_jobOrKeeper]) revert AlreadyDisputed();\n    disputes[_jobOrKeeper] = true;\n    emit Dispute(_jobOrKeeper, msg.sender);\n  }\n\n  /// @inheritdoc IKeep3rDisputable\n  function resolve(address _jobOrKeeper) external override onlyDisputer {\n    if (!disputes[_jobOrKeeper]) revert NotDisputed();\n    disputes[_jobOrKeeper] = false;\n    emit Resolve(_jobOrKeeper, msg.sender);\n  }\n}\n"
    },
    "solidity/contracts/peripherals/jobs/Keep3rJobOwnership.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../../interfaces/peripherals/IKeep3rJobs.sol';\n\nabstract contract Keep3rJobOwnership is IKeep3rJobOwnership {\n  /// @inheritdoc IKeep3rJobOwnership\n  mapping(address => address) public override jobOwner;\n\n  /// @inheritdoc IKeep3rJobOwnership\n  mapping(address => address) public override jobPendingOwner;\n\n  /// @inheritdoc IKeep3rJobOwnership\n  function changeJobOwnership(address _job, address _newOwner) external override onlyJobOwner(_job) {\n    jobPendingOwner[_job] = _newOwner;\n    emit JobOwnershipChange(_job, jobOwner[_job], _newOwner);\n  }\n\n  /// @inheritdoc IKeep3rJobOwnership\n  function acceptJobOwnership(address _job) external override onlyPendingJobOwner(_job) {\n    address _previousOwner = jobOwner[_job];\n\n    jobOwner[_job] = jobPendingOwner[_job];\n    delete jobPendingOwner[_job];\n\n    emit JobOwnershipAssent(msg.sender, _job, _previousOwner);\n  }\n\n  modifier onlyJobOwner(address _job) {\n    if (msg.sender != jobOwner[_job]) revert OnlyJobOwner();\n    _;\n  }\n\n  modifier onlyPendingJobOwner(address _job) {\n    if (msg.sender != jobPendingOwner[_job]) revert OnlyPendingJobOwner();\n    _;\n  }\n}\n"
    },
    "solidity/interfaces/peripherals/IKeep3rJobs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\n/// @title Keep3rJobFundableCredits contract\n/// @notice Handles the addition and withdrawal of credits from a job\ninterface IKeep3rJobFundableCredits {\n  // Events\n\n  /// @notice Emitted when Keep3rJobFundableCredits#addTokenCreditsToJob is called\n  /// @param _job The address of the job being credited\n  /// @param _token The address of the token being provided\n  /// @param _provider The user that calls the function\n  /// @param _amount The amount of credit being added to the job\n  event TokenCreditAddition(address indexed _job, address indexed _token, address indexed _provider, uint256 _amount);\n\n  /// @notice Emitted when Keep3rJobFundableCredits#withdrawTokenCreditsFromJob is called\n  /// @param _job The address of the job from which the credits are withdrawn\n  /// @param _token The credit being withdrawn from the job\n  /// @param _receiver The user that receives the tokens\n  /// @param _amount The amount of credit withdrawn\n  event TokenCreditWithdrawal(address indexed _job, address indexed _token, address indexed _receiver, uint256 _amount);\n\n  // Errors\n\n  /// @notice Throws when the token is KP3R, as it should not be used for direct token payments\n  error TokenUnallowed();\n\n  /// @notice Throws when the token withdraw cooldown has not yet passed\n  error JobTokenCreditsLocked();\n\n  /// @notice Throws when the user tries to withdraw more tokens than it has\n  error InsufficientJobTokenCredits();\n\n  // Variables\n\n  /// @notice Last block where tokens were added to the job\n  /// @param _job The address of the job credited\n  /// @param _token The address of the token credited\n  /// @return _timestamp The last block where tokens were added to the job\n  function jobTokenCreditsAddedAt(address _job, address _token) external view returns (uint256 _timestamp);\n\n  // Methods\n\n  /// @notice Add credit to a job to be paid out for work\n  /// @param _job The address of the job being credited\n  /// @param _token The address of the token being credited\n  /// @param _amount The amount of credit being added\n  function addTokenCreditsToJob(\n    address _job,\n    address _token,\n    uint256 _amount\n  ) external;\n\n  /// @notice Withdraw credit from a job\n  /// @param _job The address of the job from which the credits are withdrawn\n  /// @param _token The address of the token being withdrawn\n  /// @param _amount The amount of token to be withdrawn\n  /// @param _receiver The user that will receive tokens\n  function withdrawTokenCreditsFromJob(\n    address _job,\n    address _token,\n    uint256 _amount,\n    address _receiver\n  ) external;\n}\n\n/// @title  Keep3rJobFundableLiquidity contract\n/// @notice Handles the funding of jobs through specific liquidity pairs\ninterface IKeep3rJobFundableLiquidity {\n  // Events\n\n  /// @notice Emitted when Keep3rJobFundableLiquidity#approveLiquidity function is called\n  /// @param _liquidity The address of the liquidity pair being approved\n  event LiquidityApproval(address _liquidity);\n\n  /// @notice Emitted when Keep3rJobFundableLiquidity#revokeLiquidity function is called\n  /// @param _liquidity The address of the liquidity pair being revoked\n  event LiquidityRevocation(address _liquidity);\n\n  /// @notice Emitted when IKeep3rJobFundableLiquidity#addLiquidityToJob function is called\n  /// @param _job The address of the job to which liquidity will be added\n  /// @param _liquidity The address of the liquidity being added\n  /// @param _provider The user that calls the function\n  /// @param _amount The amount of liquidity being added\n  event LiquidityAddition(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _amount);\n\n  /// @notice Emitted when IKeep3rJobFundableLiquidity#withdrawLiquidityFromJob function is called\n  /// @param _job The address of the job of which liquidity will be withdrawn from\n  /// @param _liquidity The address of the liquidity being withdrawn\n  /// @param _receiver The receiver of the liquidity tokens\n  /// @param _amount The amount of liquidity being withdrawn from the job\n  event LiquidityWithdrawal(address indexed _job, address indexed _liquidity, address indexed _receiver, uint256 _amount);\n\n  /// @notice Emitted when Keep3rJobFundableLiquidity#addLiquidityToJob function is called\n  /// @param _job The address of the job whose credits will be updated\n  /// @param _rewardedAt The time at which the job was last rewarded\n  /// @param _currentCredits The current credits of the job\n  /// @param _periodCredits The credits of the job for the current period\n  event LiquidityCreditsReward(address indexed _job, uint256 _rewardedAt, uint256 _currentCredits, uint256 _periodCredits);\n\n  /// @notice Emitted when Keep3rJobFundableLiquidity#forceLiquidityCreditsToJob function is called\n  /// @param _job The address of the job whose credits will be updated\n  /// @param _rewardedAt The time at which the job was last rewarded\n  /// @param _currentCredits The current credits of the job\n  event LiquidityCreditsForced(address indexed _job, uint256 _rewardedAt, uint256 _currentCredits);\n\n  // Errors\n\n  /// @notice Throws when the liquidity being approved has already been approved\n  error LiquidityPairApproved();\n\n  /// @notice Throws when the liquidity being removed has not been approved\n  error LiquidityPairUnexistent();\n\n  /// @notice Throws when trying to add liquidity to an unapproved pool\n  error LiquidityPairUnapproved();\n\n  /// @notice Throws when the job doesn't have the requested liquidity\n  error JobLiquidityUnexistent();\n\n  /// @notice Throws when trying to remove more liquidity than the job has\n  error JobLiquidityInsufficient();\n\n  /// @notice Throws when trying to add less liquidity than the minimum liquidity required\n  error JobLiquidityLessThanMin();\n\n  // Structs\n\n  /// @notice Stores the tick information of the different liquidity pairs\n  struct TickCache {\n    int56 current; // Tracks the current tick\n    int56 difference; // Stores the difference between the current tick and the last tick\n    uint256 period; // Stores the period at which the last observation was made\n  }\n\n  // Variables\n\n  /// @notice Lists liquidity pairs\n  /// @return _list An array of addresses with all the approved liquidity pairs\n  function approvedLiquidities() external view returns (address[] memory _list);\n\n  /// @notice Amount of liquidity in a specified job\n  /// @param _job The address of the job being checked\n  /// @param _liquidity The address of the liquidity we are checking\n  /// @return _amount Amount of liquidity in the specified job\n  function liquidityAmount(address _job, address _liquidity) external view returns (uint256 _amount);\n\n  /// @notice Last time the job was rewarded liquidity credits\n  /// @param _job The address of the job being checked\n  /// @return _timestamp Timestamp of the last time the job was rewarded liquidity credits\n  function rewardedAt(address _job) external view returns (uint256 _timestamp);\n\n  /// @notice Last time the job was worked\n  /// @param _job The address of the job being checked\n  /// @return _timestamp Timestamp of the last time the job was worked\n  function workedAt(address _job) external view returns (uint256 _timestamp);\n\n  // Methods\n\n  /// @notice Returns the liquidity credits of a given job\n  /// @param _job The address of the job of which we want to know the liquidity credits\n  /// @return _amount The liquidity credits of a given job\n  function jobLiquidityCredits(address _job) external view returns (uint256 _amount);\n\n  /// @notice Returns the credits of a given job for the current period\n  /// @param _job The address of the job of which we want to know the period credits\n  /// @return _amount The credits the given job has at the current period\n  function jobPeriodCredits(address _job) external view returns (uint256 _amount);\n\n  /// @notice Calculates the total credits of a given job\n  /// @param _job The address of the job of which we want to know the total credits\n  /// @return _amount The total credits of the given job\n  function totalJobCredits(address _job) external view returns (uint256 _amount);\n\n  /// @notice Calculates how many credits should be rewarded periodically for a given liquidity amount\n  /// @dev _periodCredits = underlying KP3Rs for given liquidity amount * rewardPeriod / inflationPeriod\n  /// @param _liquidity The address of the liquidity to provide\n  /// @param _amount The amount of liquidity to provide\n  /// @return _periodCredits The amount of KP3R periodically minted for the given liquidity\n  function quoteLiquidity(address _liquidity, uint256 _amount) external view returns (uint256 _periodCredits);\n\n  /// @notice Observes the current state of the liquidity pair being observed and updates TickCache with the information\n  /// @param _liquidity The address of the liquidity pair being observed\n  /// @return _tickCache The updated TickCache\n  function observeLiquidity(address _liquidity) external view returns (TickCache memory _tickCache);\n\n  /// @notice Gifts liquidity credits to the specified job\n  /// @param _job The address of the job being credited\n  /// @param _amount The amount of liquidity credits to gift\n  function forceLiquidityCreditsToJob(address _job, uint256 _amount) external;\n\n  /// @notice Approve a liquidity pair for being accepted in future\n  /// @param _liquidity The address of the liquidity accepted\n  function approveLiquidity(address _liquidity) external;\n\n  /// @notice Revoke a liquidity pair from being accepted in future\n  /// @param _liquidity The liquidity no longer accepted\n  function revokeLiquidity(address _liquidity) external;\n\n  /// @notice Allows anyone to fund a job with liquidity\n  /// @param _job The address of the job to assign liquidity to\n  /// @param _liquidity The liquidity being added\n  /// @param _amount The amount of liquidity tokens to add\n  function addLiquidityToJob(\n    address _job,\n    address _liquidity,\n    uint256 _amount\n  ) external;\n\n  /// @notice Unbond liquidity for a job\n  /// @dev Can only be called by the job's owner\n  /// @param _job The address of the job being unbonded from\n  /// @param _liquidity The liquidity being unbonded\n  /// @param _amount The amount of liquidity being removed\n  function unbondLiquidityFromJob(\n    address _job,\n    address _liquidity,\n    uint256 _amount\n  ) external;\n\n  /// @notice Withdraw liquidity from a job\n  /// @param _job The address of the job being withdrawn from\n  /// @param _liquidity The liquidity being withdrawn\n  /// @param _receiver The address that will receive the withdrawn liquidity\n  function withdrawLiquidityFromJob(\n    address _job,\n    address _liquidity,\n    address _receiver\n  ) external;\n}\n\n/// @title Keep3rJobManager contract\n/// @notice Handles the addition and withdrawal of credits from a job\ninterface IKeep3rJobManager {\n  // Events\n\n  /// @notice Emitted when Keep3rJobManager#addJob is called\n  /// @param _job The address of the job to add\n  /// @param _jobOwner The job's owner\n  event JobAddition(address indexed _job, address indexed _jobOwner);\n\n  // Errors\n\n  /// @notice Throws when trying to add a job that has already been added\n  error JobAlreadyAdded();\n\n  /// @notice Throws when the address that is trying to register as a keeper is already a keeper\n  error AlreadyAKeeper();\n\n  // Methods\n\n  /// @notice Allows any caller to add a new job\n  /// @param _job Address of the contract for which work should be performed\n  function addJob(address _job) external;\n}\n\n/// @title Keep3rJobWorkable contract\n/// @notice Handles the mechanisms jobs can pay keepers with along with the restrictions jobs can put on keepers before they can work on jobs\ninterface IKeep3rJobWorkable {\n  // Events\n\n  /// @notice Emitted when a keeper is validated before a job\n  /// @param _gasLeft The amount of gas that the transaction has left at the moment of keeper validation\n  event KeeperValidation(uint256 _gasLeft);\n\n  /// @notice Emitted when a keeper works a job\n  /// @param _credit The address of the asset in which the keeper is paid\n  /// @param _job The address of the job the keeper has worked\n  /// @param _keeper The address of the keeper that has worked the job\n  /// @param _payment The amount that has been paid out to the keeper in exchange for working the job\n  /// @param _gasLeft The amount of gas that the transaction has left at the moment of payment\n  event KeeperWork(address indexed _credit, address indexed _job, address indexed _keeper, uint256 _payment, uint256 _gasLeft);\n\n  // Errors\n\n  /// @notice Throws if the address claiming to be a job is not in the list of approved jobs\n  error JobUnapproved();\n\n  /// @notice Throws if the amount of funds in the job is less than the payment that must be paid to the keeper that works that job\n  error InsufficientFunds();\n\n  // Methods\n\n  /// @notice Confirms if the current keeper is registered\n  /// @dev Can be used for general (non critical) functions\n  /// @param _keeper The keeper being investigated\n  /// @return _isKeeper Whether the address passed as a parameter is a keeper or not\n  function isKeeper(address _keeper) external returns (bool _isKeeper);\n\n  /// @notice Confirms if the current keeper is registered and has a minimum bond of any asset.\n  /// @dev Should be used for protected functions\n  /// @param _keeper The keeper to check\n  /// @param _bond The bond token being evaluated\n  /// @param _minBond The minimum amount of bonded tokens\n  /// @param _earned The minimum funds earned in the keepers lifetime\n  /// @param _age The minimum keeper age required\n  /// @return _isBondedKeeper Whether the `_keeper` meets the given requirements\n  function isBondedKeeper(\n    address _keeper,\n    address _bond,\n    uint256 _minBond,\n    uint256 _earned,\n    uint256 _age\n  ) external returns (bool _isBondedKeeper);\n\n  /// @notice Implemented by jobs to show that a keeper performed work\n  /// @dev Automatically calculates the payment for the keeper and pays the keeper with bonded KP3R\n  /// @param _keeper Address of the keeper that performed the work\n  function worked(address _keeper) external;\n\n  /// @notice Implemented by jobs to show that a keeper performed work\n  /// @dev Pays the keeper that performs the work with KP3R\n  /// @param _keeper Address of the keeper that performed the work\n  /// @param _payment The reward that should be allocated for the job\n  function bondedPayment(address _keeper, uint256 _payment) external;\n\n  /// @notice Implemented by jobs to show that a keeper performed work\n  /// @dev Pays the keeper that performs the work with a specific token\n  /// @param _token The asset being awarded to the keeper\n  /// @param _keeper Address of the keeper that performed the work\n  /// @param _amount The reward that should be allocated\n  function directTokenPayment(\n    address _token,\n    address _keeper,\n    uint256 _amount\n  ) external;\n}\n\n/// @title Keep3rJobOwnership contract\n/// @notice Handles the ownership of the jobs\ninterface IKeep3rJobOwnership {\n  // Events\n\n  /// @notice Emitted when Keep3rJobOwnership#changeJobOwnership is called\n  /// @param _job The address of the job proposed to have a change of owner\n  /// @param _owner The current owner of the job\n  /// @param _pendingOwner The new address proposed to be the owner of the job\n  event JobOwnershipChange(address indexed _job, address indexed _owner, address indexed _pendingOwner);\n\n  /// @notice Emitted when Keep3rJobOwnership#JobOwnershipAssent is called\n  /// @param _job The address of the job which the proposed owner will now own\n  /// @param _previousOwner The previous owner of the job\n  /// @param _newOwner The new owner of the job\n  event JobOwnershipAssent(address indexed _job, address indexed _previousOwner, address indexed _newOwner);\n\n  // Errors\n\n  /// @notice Throws when the caller of the function is not the job owner\n  error OnlyJobOwner();\n\n  /// @notice Throws when the caller of the function is not the pending job owner\n  error OnlyPendingJobOwner();\n\n  // Variables\n\n  /// @notice Maps the job to the owner of the job\n  /// @param _job The address of the job\n  /// @return _owner The address of the owner of the job\n  function jobOwner(address _job) external view returns (address _owner);\n\n  /// @notice Maps the job to its pending owner\n  /// @param _job The address of the job\n  /// @return _pendingOwner The address of the pending owner of the job\n  function jobPendingOwner(address _job) external view returns (address _pendingOwner);\n\n  // Methods\n\n  /// @notice Proposes a new address to be the owner of the job\n  /// @param _job The address of the job\n  /// @param _newOwner The address of the proposed new owner\n  function changeJobOwnership(address _job, address _newOwner) external;\n\n  /// @notice The proposed address accepts to be the owner of the job\n  /// @param _job The address of the job\n  function acceptJobOwnership(address _job) external;\n}\n\n/// @title Keep3rJobMigration contract\n/// @notice Handles the migration process of jobs to different addresses\ninterface IKeep3rJobMigration {\n  // Events\n\n  /// @notice Emitted when Keep3rJobMigration#migrateJob function is called\n  /// @param _fromJob The address of the job that requests to migrate\n  /// @param _toJob The address at which the job requests to migrate\n  event JobMigrationRequested(address indexed _fromJob, address _toJob);\n\n  /// @notice Emitted when Keep3rJobMigration#acceptJobMigration function is called\n  /// @param _fromJob The address of the job that requested to migrate\n  /// @param _toJob The address at which the job had requested to migrate\n  event JobMigrationSuccessful(address _fromJob, address indexed _toJob);\n\n  // Errors\n\n  /// @notice Throws when the address of the job that requests to migrate wants to migrate to its same address\n  error JobMigrationImpossible();\n\n  /// @notice Throws when the _toJob address differs from the address being tracked in the pendingJobMigrations mapping\n  error JobMigrationUnavailable();\n\n  /// @notice Throws when cooldown between migrations has not yet passed\n  error JobMigrationLocked();\n\n  // Variables\n\n  /// @notice Maps the jobs that have requested a migration to the address they have requested to migrate to\n  /// @return _toJob The address to which the job has requested to migrate to\n  function pendingJobMigrations(address _fromJob) external view returns (address _toJob);\n\n  // Methods\n\n  /// @notice Initializes the migration process for a job by adding the request to the pendingJobMigrations mapping\n  /// @param _fromJob The address of the job that is requesting to migrate\n  /// @param _toJob The address at which the job is requesting to migrate\n  function migrateJob(address _fromJob, address _toJob) external;\n\n  /// @notice Completes the migration process for a job\n  /// @dev Unbond/withdraw process doesn't get migrated\n  /// @param _fromJob The address of the job that requested to migrate\n  /// @param _toJob The address to which the job wants to migrate to\n  function acceptJobMigration(address _fromJob, address _toJob) external;\n}\n\n/// @title Keep3rJobDisputable contract\n/// @notice Handles the actions that can be taken on a disputed job\ninterface IKeep3rJobDisputable is IKeep3rJobFundableCredits, IKeep3rJobFundableLiquidity {\n  // Events\n\n  /// @notice Emitted when Keep3rJobDisputable#slashTokenFromJob is called\n  /// @param _job The address of the job from which the token will be slashed\n  /// @param _token The address of the token being slashed\n  /// @param _slasher The user that slashes the token\n  /// @param _amount The amount of the token being slashed\n  event JobSlashToken(address indexed _job, address _token, address indexed _slasher, uint256 _amount);\n\n  /// @notice Emitted when Keep3rJobDisputable#slashLiquidityFromJob is called\n  /// @param _job The address of the job from which the liquidity will be slashed\n  /// @param _liquidity The address of the liquidity being slashed\n  /// @param _slasher The user that slashes the liquidity\n  /// @param _amount The amount of the liquidity being slashed\n  event JobSlashLiquidity(address indexed _job, address _liquidity, address indexed _slasher, uint256 _amount);\n\n  // Errors\n\n  /// @notice Throws when the token trying to be slashed doesn't exist\n  error JobTokenUnexistent();\n\n  /// @notice Throws when someone tries to slash more tokens than the job has\n  error JobTokenInsufficient();\n\n  // Methods\n\n  /// @notice Allows governance or slasher to slash a job specific token\n  /// @param _job The address of the job from which the token will be slashed\n  /// @param _token The address of the token that will be slashed\n  /// @param _amount The amount of the token that will be slashed\n  function slashTokenFromJob(\n    address _job,\n    address _token,\n    uint256 _amount\n  ) external;\n\n  /// @notice Allows governance or a slasher to slash liquidity from a job\n  /// @param _job The address being slashed\n  /// @param _liquidity The address of the liquidity that will be slashed\n  /// @param _amount The amount of liquidity that will be slashed\n  function slashLiquidityFromJob(\n    address _job,\n    address _liquidity,\n    uint256 _amount\n  ) external;\n}\n\n// solhint-disable-next-line no-empty-blocks\ninterface IKeep3rJobs is IKeep3rJobOwnership, IKeep3rJobDisputable, IKeep3rJobMigration, IKeep3rJobManager, IKeep3rJobWorkable {\n\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "solidity/interfaces/peripherals/IKeep3rAccountance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\n/// @title Keep3rDisputable contract\n/// @notice Disputes keepers, or if they're already disputed, it can resolve the case\n/// @dev Argument `bonding` can be the address of either a token or a liquidity\ninterface IKeep3rAccountance {\n  // Events\n\n  /// @notice Emitted when the bonding process of a new keeper begins\n  /// @param _keeper The caller of Keep3rKeeperFundable#bond function\n  /// @param _bonding The asset the keeper has bonded\n  /// @param _amount The amount the keeper has bonded\n  event Bonding(address indexed _keeper, address indexed _bonding, uint256 _amount);\n\n  /// @notice Emitted when a keeper or job begins the unbonding process to withdraw the funds\n  /// @param _keeperOrJob The keeper or job that began the unbonding process\n  /// @param _unbonding The liquidity pair or asset being unbonded\n  /// @param _amount The amount being unbonded\n  event Unbonding(address indexed _keeperOrJob, address indexed _unbonding, uint256 _amount);\n\n  // Variables\n\n  /// @notice Tracks the total KP3R earnings of a keeper since it started working\n  /// @param _keeper The address of the keeper\n  /// @return _workCompleted Total KP3R earnings of a keeper since it started working\n  function workCompleted(address _keeper) external view returns (uint256 _workCompleted);\n\n  /// @notice Tracks when a keeper was first registered\n  /// @param _keeper The address of the keeper\n  /// @return timestamp The time at which the keeper was first registered\n  function firstSeen(address _keeper) external view returns (uint256 timestamp);\n\n  /// @notice Tracks if a keeper or job has a pending dispute\n  /// @param _keeperOrJob The address of the keeper or job\n  /// @return _disputed Whether a keeper or job has a pending dispute\n  function disputes(address _keeperOrJob) external view returns (bool _disputed);\n\n  /// @notice Tracks how much a keeper has bonded of a certain token\n  /// @param _keeper The address of the keeper\n  /// @param _bond The address of the token being bonded\n  /// @return _bonds Amount of a certain token that a keeper has bonded\n  function bonds(address _keeper, address _bond) external view returns (uint256 _bonds);\n\n  /// @notice The current token credits available for a job\n  /// @param _job The address of the job\n  /// @param _token The address of the token bonded\n  /// @return _amount The amount of token credits available for a job\n  function jobTokenCredits(address _job, address _token) external view returns (uint256 _amount);\n\n  /// @notice Tracks the amount of assets deposited in pending bonds\n  /// @param _keeper The address of the keeper\n  /// @param _bonding The address of the token being bonded\n  /// @return _pendingBonds Amount of a certain asset a keeper has unbonding\n  function pendingBonds(address _keeper, address _bonding) external view returns (uint256 _pendingBonds);\n\n  /// @notice Tracks when a bonding for a keeper can be activated\n  /// @param _keeper The address of the keeper\n  /// @param _bonding The address of the token being bonded\n  /// @return _timestamp Time at which the bonding for a keeper can be activated\n  function canActivateAfter(address _keeper, address _bonding) external view returns (uint256 _timestamp);\n\n  /// @notice Tracks when keeper bonds are ready to be withdrawn\n  /// @param _keeper The address of the keeper\n  /// @param _bonding The address of the token being unbonded\n  /// @return _timestamp Time at which the keeper bonds are ready to be withdrawn\n  function canWithdrawAfter(address _keeper, address _bonding) external view returns (uint256 _timestamp);\n\n  /// @notice Tracks how much keeper bonds are to be withdrawn\n  /// @param _keeper The address of the keeper\n  /// @param _bonding The address of the token being unbonded\n  /// @return _pendingUnbonds The amount of keeper bonds that are to be withdrawn\n  function pendingUnbonds(address _keeper, address _bonding) external view returns (uint256 _pendingUnbonds);\n\n  /// @notice Checks whether the address has ever bonded an asset\n  /// @param _keeper The address of the keeper\n  /// @return _hasBonded Whether the address has ever bonded an asset\n  function hasBonded(address _keeper) external view returns (bool _hasBonded);\n\n  // Methods\n\n  /// @notice Lists all jobs\n  /// @return _jobList Array with all the jobs in _jobs\n  function jobs() external view returns (address[] memory _jobList);\n\n  /// @notice Lists all keepers\n  /// @return _keeperList Array with all the keepers in _keepers\n  function keepers() external view returns (address[] memory _keeperList);\n\n  // Errors\n\n  /// @notice Throws when an address is passed as a job, but that address is not a job\n  error JobUnavailable();\n\n  /// @notice Throws when an action that requires an undisputed job is applied on a disputed job\n  error JobDisputed();\n}\n"
    },
    "solidity/interfaces/IKeep3rHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\n/// @title Keep3rHelper contract\n/// @notice Contains all the helper functions used throughout the different files.\n\ninterface IKeep3rHelper {\n  // Errors\n\n  /// @notice Throws when none of the tokens in the liquidity pair is KP3R\n  error LiquidityPairInvalid();\n\n  // Methods\n  // solhint-enable func-name-mixedcase\n\n  /// @notice Calculates the amount of KP3R that corresponds to the ETH passed into the function\n  /// @dev This function allows us to calculate how much KP3R we should pay to a keeper for things expressed in ETH, like gas\n  /// @param _eth The amount of ETH\n  /// @return _amountOut The amount of KP3R\n  function quote(uint256 _eth) external view returns (uint256 _amountOut);\n\n  /// @notice Returns the amount of KP3R the keeper has bonded\n  /// @param _keeper The address of the keeper to check\n  /// @return _amountBonded The amount of KP3R the keeper has bonded\n  function bonds(address _keeper) external view returns (uint256 _amountBonded);\n\n  /// @notice Calculates the reward (in KP3R) that corresponds to a keeper for using gas\n  /// @param _keeper The address of the keeper to check\n  /// @param _gasUsed The amount of gas used that will be rewarded\n  /// @return _kp3r The amount of KP3R that should be awarded to the keeper\n  function getRewardAmountFor(address _keeper, uint256 _gasUsed) external view returns (uint256 _kp3r);\n\n  /// @notice Calculates the boost in the reward given to a keeper based on the amount of KP3R that keeper has bonded\n  /// @param _bonds The amount of KP3R tokens bonded by the keeper\n  /// @return _rewardBoost The reward boost that corresponds to the keeper\n  function getRewardBoostFor(uint256 _bonds) external view returns (uint256 _rewardBoost);\n\n  /// @notice Calculates the reward (in KP3R) that corresponds to tx.origin for using gas\n  /// @param _gasUsed The amount of gas used that will be rewarded\n  /// @return _amount The amount of KP3R that should be awarded to tx.origin\n  function getRewardAmount(uint256 _gasUsed) external view returns (uint256 _amount);\n\n  /// @notice Given a pool address, returns the underlying tokens of the pair\n  /// @param _pool Address of the correspondant pool\n  /// @return _token0 Address of the first token of the pair\n  /// @return _token1 Address of the second token of the pair\n  function getPoolTokens(address _pool) external view returns (address _token0, address _token1);\n\n  /// @notice Defines the order of the tokens in the pair for twap calculations\n  /// @param _pool Address of the correspondant pool\n  /// @return _isKP3RToken0 Boolean indicating the order of the tokens in the pair\n  function isKP3RToken0(address _pool) external view returns (bool _isKP3RToken0);\n\n  /// @notice Given an array of secondsAgo, returns UniswapV3 pool cumulatives at that moment\n  /// @param _pool Address of the pool to observe\n  /// @param _secondsAgo Array with time references to observe\n  /// @return _tickCumulative1 Cummulative sum of ticks until first time reference\n  /// @return _tickCumulative2 Cummulative sum of ticks until second time reference\n  /// @return _success Boolean indicating if the observe call was succesfull\n  function observe(address _pool, uint32[] memory _secondsAgo)\n    external\n    view\n    returns (\n      int56 _tickCumulative1,\n      int56 _tickCumulative2,\n      bool _success\n    );\n\n  /// @notice Get multiplier, quote, and extra, in order to calculate keeper payment\n  /// @param _bonds Amount of bonded KP3R owned by the keeper\n  /// @return _boost Multiplier per gas unit. Takes into account the base fee and the amount of bonded KP3R\n  /// @return _oneEthQuote Amount of KP3R tokens equivalent to 1 ETH\n  /// @return _extra Amount of extra gas that should be added to the gas spent\n  function getPaymentParams(uint256 _bonds)\n    external\n    view\n    returns (\n      uint256 _boost,\n      uint256 _oneEthQuote,\n      uint256 _extra\n    );\n\n  /// @notice Given a tick and a liquidity amount, calculates the underlying KP3R tokens\n  /// @param _liquidityAmount Amount of liquidity to be converted\n  /// @param _tickDifference Tick value used to calculate the quote\n  /// @param _timeInterval Time value used to calculate the quote\n  /// @return _kp3rAmount Amount of KP3R tokens underlying on the given liquidity\n  function getKP3RsAtTick(\n    uint256 _liquidityAmount,\n    int56 _tickDifference,\n    uint256 _timeInterval\n  ) external pure returns (uint256 _kp3rAmount);\n\n  /// @notice Given a tick and a token amount, calculates the output in correspondant token\n  /// @param _baseAmount Amount of token to be converted\n  /// @param _tickDifference Tick value used to calculate the quote\n  /// @param _timeInterval Time value used to calculate the quote\n  /// @return _quoteAmount Amount of credits deserved for the baseAmount at the tick value\n  function getQuoteAtTick(\n    uint128 _baseAmount,\n    int56 _tickDifference,\n    uint256 _timeInterval\n  ) external pure returns (uint256 _quoteAmount);\n}\n"
    },
    "solidity/interfaces/peripherals/IKeep3rParameters.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './IBaseErrors.sol';\n\n/// @title Keep3rParameters contract\n/// @notice Handles and sets all the required parameters for Keep3r\n\ninterface IKeep3rParameters is IBaseErrors {\n  // Events\n\n  /// @notice Emitted when the Keep3rHelper address is changed\n  /// @param _keep3rHelper The address of Keep3rHelper's contract\n  event Keep3rHelperChange(address _keep3rHelper);\n\n  /// @notice Emitted when the Keep3rV1 address is changed\n  /// @param _keep3rV1 The address of Keep3rV1's contract\n  event Keep3rV1Change(address _keep3rV1);\n\n  /// @notice Emitted when the Keep3rV1Proxy address is changed\n  /// @param _keep3rV1Proxy The address of Keep3rV1Proxy's contract\n  event Keep3rV1ProxyChange(address _keep3rV1Proxy);\n\n  /// @notice Emitted when the KP3R-WETH pool address is changed\n  /// @param _kp3rWethPool The address of the KP3R-WETH pool\n  event Kp3rWethPoolChange(address _kp3rWethPool);\n\n  /// @notice Emitted when bondTime is changed\n  /// @param _bondTime The new bondTime\n  event BondTimeChange(uint256 _bondTime);\n\n  /// @notice Emitted when _liquidityMinimum is changed\n  /// @param _liquidityMinimum The new _liquidityMinimum\n  event LiquidityMinimumChange(uint256 _liquidityMinimum);\n\n  /// @notice Emitted when _unbondTime is changed\n  /// @param _unbondTime The new _unbondTime\n  event UnbondTimeChange(uint256 _unbondTime);\n\n  /// @notice Emitted when _rewardPeriodTime is changed\n  /// @param _rewardPeriodTime The new _rewardPeriodTime\n  event RewardPeriodTimeChange(uint256 _rewardPeriodTime);\n\n  /// @notice Emitted when the inflationPeriod is changed\n  /// @param _inflationPeriod The new inflationPeriod\n  event InflationPeriodChange(uint256 _inflationPeriod);\n\n  /// @notice Emitted when the fee is changed\n  /// @param _fee The new token credits fee\n  event FeeChange(uint256 _fee);\n\n  // Variables\n\n  /// @notice Address of Keep3rHelper's contract\n  /// @return _keep3rHelper The address of Keep3rHelper's contract\n  function keep3rHelper() external view returns (address _keep3rHelper);\n\n  /// @notice Address of Keep3rV1's contract\n  /// @return _keep3rV1 The address of Keep3rV1's contract\n  function keep3rV1() external view returns (address _keep3rV1);\n\n  /// @notice Address of Keep3rV1Proxy's contract\n  /// @return _keep3rV1Proxy The address of Keep3rV1Proxy's contract\n  function keep3rV1Proxy() external view returns (address _keep3rV1Proxy);\n\n  /// @notice Address of the KP3R-WETH pool\n  /// @return _kp3rWethPool The address of KP3R-WETH pool\n  function kp3rWethPool() external view returns (address _kp3rWethPool);\n\n  /// @notice The amount of time required to pass after a keeper has bonded assets for it to be able to activate\n  /// @return _days The required bondTime in days\n  function bondTime() external view returns (uint256 _days);\n\n  /// @notice The amount of time required to pass before a keeper can unbond what he has bonded\n  /// @return _days The required unbondTime in days\n  function unbondTime() external view returns (uint256 _days);\n\n  /// @notice The minimum amount of liquidity required to fund a job per liquidity\n  /// @return _amount The minimum amount of liquidity in KP3R\n  function liquidityMinimum() external view returns (uint256 _amount);\n\n  /// @notice The amount of time between each scheduled credits reward given to a job\n  /// @return _days The reward period in days\n  function rewardPeriodTime() external view returns (uint256 _days);\n\n  /// @notice The inflation period is the denominator used to regulate the emission of KP3R\n  /// @return _period The denominator used to regulate the emission of KP3R\n  function inflationPeriod() external view returns (uint256 _period);\n\n  /// @notice The fee to be sent to governance when a user adds liquidity to a job\n  /// @return _amount The fee amount to be sent to governance when a user adds liquidity to a job\n  function fee() external view returns (uint256 _amount);\n\n  // Errors\n\n  /// @notice Throws if the reward period is less than the minimum reward period time\n  error MinRewardPeriod();\n\n  /// @notice Throws if either a job or a keeper is disputed\n  error Disputed();\n\n  /// @notice Throws if there are no bonded assets\n  error BondsUnexistent();\n\n  /// @notice Throws if the time required to bond an asset has not passed yet\n  error BondsLocked();\n\n  /// @notice Throws if there are no bonds to withdraw\n  error UnbondsUnexistent();\n\n  /// @notice Throws if the time required to withdraw the bonds has not passed yet\n  error UnbondsLocked();\n\n  // Methods\n\n  /// @notice Sets the Keep3rHelper address\n  /// @param _keep3rHelper The Keep3rHelper address\n  function setKeep3rHelper(address _keep3rHelper) external;\n\n  /// @notice Sets the Keep3rV1 address\n  /// @param _keep3rV1 The Keep3rV1 address\n  function setKeep3rV1(address _keep3rV1) external;\n\n  /// @notice Sets the Keep3rV1Proxy address\n  /// @param _keep3rV1Proxy The Keep3rV1Proxy address\n  function setKeep3rV1Proxy(address _keep3rV1Proxy) external;\n\n  /// @notice Sets the KP3R-WETH pool address\n  /// @param _kp3rWethPool The KP3R-WETH pool address\n  function setKp3rWethPool(address _kp3rWethPool) external;\n\n  /// @notice Sets the bond time required to activate as a keeper\n  /// @param _bond The new bond time\n  function setBondTime(uint256 _bond) external;\n\n  /// @notice Sets the unbond time required unbond what has been bonded\n  /// @param _unbond The new unbond time\n  function setUnbondTime(uint256 _unbond) external;\n\n  /// @notice Sets the minimum amount of liquidity required to fund a job\n  /// @param _liquidityMinimum The new minimum amount of liquidity\n  function setLiquidityMinimum(uint256 _liquidityMinimum) external;\n\n  /// @notice Sets the time required to pass between rewards for jobs\n  /// @param _rewardPeriodTime The new amount of time required to pass between rewards\n  function setRewardPeriodTime(uint256 _rewardPeriodTime) external;\n\n  /// @notice Sets the new inflation period\n  /// @param _inflationPeriod The new inflation period\n  function setInflationPeriod(uint256 _inflationPeriod) external;\n\n  /// @notice Sets the new fee\n  /// @param _fee The new fee\n  function setFee(uint256 _fee) external;\n}\n"
    },
    "solidity/interfaces/peripherals/IBaseErrors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4 <0.9.0;\n\ninterface IBaseErrors {\n  /// @notice Throws if a variable is assigned to the zero address\n  error ZeroAddress();\n}\n"
    },
    "solidity/interfaces/peripherals/IKeep3rRoles.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\n/// @title Keep3rRoles contract\n/// @notice Manages the Keep3r specific roles\ninterface IKeep3rRoles {\n  // Events\n\n  /// @notice Emitted when a slasher is added\n  /// @param _slasher Address of the added slasher\n  event SlasherAdded(address _slasher);\n\n  /// @notice Emitted when a slasher is removed\n  /// @param _slasher Address of the removed slasher\n  event SlasherRemoved(address _slasher);\n\n  /// @notice Emitted when a disputer is added\n  /// @param _disputer Address of the added disputer\n  event DisputerAdded(address _disputer);\n\n  /// @notice Emitted when a disputer is removed\n  /// @param _disputer Address of the removed disputer\n  event DisputerRemoved(address _disputer);\n\n  // Variables\n\n  /// @notice Tracks whether the address is a slasher or not\n  /// @param _slasher Address being checked as a slasher\n  /// @return _isSlasher Whether the address is a slasher or not\n  function slashers(address _slasher) external view returns (bool _isSlasher);\n\n  /// @notice Tracks whether the address is a disputer or not\n  /// @param _disputer Address being checked as a disputer\n  /// @return _isDisputer Whether the address is a disputer or not\n  function disputers(address _disputer) external view returns (bool _isDisputer);\n\n  // Errors\n\n  /// @notice Throws if the address is already a registered slasher\n  error SlasherExistent();\n\n  /// @notice Throws if caller is not a registered slasher\n  error SlasherUnexistent();\n\n  /// @notice Throws if the address is already a registered disputer\n  error DisputerExistent();\n\n  /// @notice Throws if caller is not a registered disputer\n  error DisputerUnexistent();\n\n  /// @notice Throws if the msg.sender is not a slasher or is not a part of governance\n  error OnlySlasher();\n\n  /// @notice Throws if the msg.sender is not a disputer or is not a part of governance\n  error OnlyDisputer();\n\n  // Methods\n\n  /// @notice Registers a slasher by updating the slashers mapping\n  function addSlasher(address _slasher) external;\n\n  /// @notice Removes a slasher by updating the slashers mapping\n  function removeSlasher(address _slasher) external;\n\n  /// @notice Registers a disputer by updating the disputers mapping\n  function addDisputer(address _disputer) external;\n\n  /// @notice Removes a disputer by updating the disputers mapping\n  function removeDisputer(address _disputer) external;\n}\n"
    },
    "solidity/contracts/peripherals/Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../interfaces/peripherals/IGovernable.sol';\n\nabstract contract Governable is IGovernable {\n  /// @inheritdoc IGovernable\n  address public override governance;\n\n  /// @inheritdoc IGovernable\n  address public override pendingGovernance;\n\n  constructor(address _governance) {\n    if (_governance == address(0)) revert NoGovernanceZeroAddress();\n    governance = _governance;\n  }\n\n  /// @inheritdoc IGovernable\n  function setGovernance(address _governance) external override onlyGovernance {\n    pendingGovernance = _governance;\n    emit GovernanceProposal(_governance);\n  }\n\n  /// @inheritdoc IGovernable\n  function acceptGovernance() external override onlyPendingGovernance {\n    governance = pendingGovernance;\n    delete pendingGovernance;\n    emit GovernanceSet(governance);\n  }\n\n  /// @notice Functions with this modifier can only be called by governance\n  modifier onlyGovernance {\n    if (msg.sender != governance) revert OnlyGovernance();\n    _;\n  }\n\n  /// @notice Functions with this modifier can only be called by pendingGovernance\n  modifier onlyPendingGovernance {\n    if (msg.sender != pendingGovernance) revert OnlyPendingGovernance();\n    _;\n  }\n}\n"
    },
    "solidity/interfaces/peripherals/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\n/// @title Governable contract\n/// @notice Manages the governance role\ninterface IGovernable {\n  // Events\n\n  /// @notice Emitted when pendingGovernance accepts to be governance\n  /// @param _governance Address of the new governance\n  event GovernanceSet(address _governance);\n\n  /// @notice Emitted when a new governance is proposed\n  /// @param _pendingGovernance Address that is proposed to be the new governance\n  event GovernanceProposal(address _pendingGovernance);\n\n  // Errors\n\n  /// @notice Throws if the caller of the function is not governance\n  error OnlyGovernance();\n\n  /// @notice Throws if the caller of the function is not pendingGovernance\n  error OnlyPendingGovernance();\n\n  /// @notice Throws if trying to set governance to zero address\n  error NoGovernanceZeroAddress();\n\n  // Variables\n\n  /// @notice Stores the governance address\n  /// @return _governance The governance addresss\n  function governance() external view returns (address _governance);\n\n  /// @notice Stores the pendingGovernance address\n  /// @return _pendingGovernance The pendingGovernance addresss\n  function pendingGovernance() external view returns (address _pendingGovernance);\n\n  // Methods\n\n  /// @notice Proposes a new address to be governance\n  /// @param _governance The address being proposed as the new governance\n  function setGovernance(address _governance) external;\n\n  /// @notice Changes the governance from the current governance to the previously proposed address\n  function acceptGovernance() external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "solidity/interfaces/IPairManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\n\n/// @title  Pair Manager interface\n/// @notice Generic interface for Keep3r liquidity pools (kLP)\ninterface IPairManager is IERC20Metadata {\n  /// @notice Address of the factory from which the pair manager was created\n  /// @return _factory The address of the PairManager Factory\n  function factory() external view returns (address _factory);\n\n  /// @notice Address of the pool from which the Keep3r pair manager will interact with\n  /// @return _pool The address of the pool\n  function pool() external view returns (address _pool);\n\n  /// @notice Token0 of the pool\n  /// @return _token0 The address of token0\n  function token0() external view returns (address _token0);\n\n  /// @notice Token1 of the pool\n  /// @return _token1 The address of token1\n  function token1() external view returns (address _token1);\n}\n"
    },
    "solidity/contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n  /// @param a The multiplicand\n  /// @param b The multiplier\n  /// @param denominator The divisor\n  /// @return result The 256-bit result\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n  function mulDiv(\n    uint256 a,\n    uint256 b,\n    uint256 denominator\n  ) internal pure returns (uint256 result) {\n    unchecked {\n      // 512-bit multiply [prod1 prod0] = a * b\n      // Compute the product mod 2**256 and mod 2**256 - 1\n      // then use the Chinese Remainder Theorem to reconstruct\n      // the 512 bit result. The result is stored in two 256\n      // variables such that product = prod1 * 2**256 + prod0\n      uint256 prod0; // Least significant 256 bits of the product\n      uint256 prod1; // Most significant 256 bits of the product\n      assembly {\n        let mm := mulmod(a, b, not(0))\n        prod0 := mul(a, b)\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n      }\n\n      // Handle non-overflow cases, 256 by 256 division\n      if (prod1 == 0) {\n        require(denominator > 0);\n        assembly {\n          result := div(prod0, denominator)\n        }\n        return result;\n      }\n\n      // Make sure the result is less than 2**256.\n      // Also prevents denominator == 0\n      require(denominator > prod1);\n\n      ///////////////////////////////////////////////\n      // 512 by 256 division.\n      ///////////////////////////////////////////////\n\n      // Make division exact by subtracting the remainder from [prod1 prod0]\n      // Compute remainder using mulmod\n      uint256 remainder;\n      assembly {\n        remainder := mulmod(a, b, denominator)\n      }\n      // Subtract 256 bit number from 512 bit number\n      assembly {\n        prod1 := sub(prod1, gt(remainder, prod0))\n        prod0 := sub(prod0, remainder)\n      }\n\n      // Factor powers of two out of denominator\n      // Compute largest power of two divisor of denominator.\n      // Always >= 1.\n      uint256 twos = (~denominator + 1) & denominator;\n      // Divide denominator by power of two\n      assembly {\n        denominator := div(denominator, twos)\n      }\n\n      // Divide [prod1 prod0] by the factors of two\n      assembly {\n        prod0 := div(prod0, twos)\n      }\n      // Shift in bits from prod1 into prod0. For this we need\n      // to flip `twos` such that it is 2**256 / twos.\n      // If twos is zero, then it becomes one\n      assembly {\n        twos := add(div(sub(0, twos), twos), 1)\n      }\n      prod0 |= prod1 * twos;\n\n      // Invert denominator mod 2**256\n      // Now that denominator is an odd number, it has an inverse\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n      // Compute the inverse by starting with a seed that is correct\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\n      uint256 inv = (3 * denominator) ^ 2;\n      // Now use Newton-Raphson iteration to improve the precision.\n      // Thanks to Hensel's lifting lemma, this also works in modular\n      // arithmetic, doubling the correct bits in each step.\n      inv *= 2 - denominator * inv; // inverse mod 2**8\n      inv *= 2 - denominator * inv; // inverse mod 2**16\n      inv *= 2 - denominator * inv; // inverse mod 2**32\n      inv *= 2 - denominator * inv; // inverse mod 2**64\n      inv *= 2 - denominator * inv; // inverse mod 2**128\n      inv *= 2 - denominator * inv; // inverse mod 2**256\n\n      // Because the division is now exact we can divide by multiplying\n      // with the modular inverse of denominator. This will give us the\n      // correct result modulo 2**256. Since the precoditions guarantee\n      // that the outcome is less than 2**256, this is the final result.\n      // We don't need to compute the high bits of the result and prod1\n      // is no longer required.\n      result = prod0 * inv;\n      return result;\n    }\n  }\n\n  /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n  /// @param a The multiplicand\n  /// @param b The multiplier\n  /// @param denominator The divisor\n  /// @return result The 256-bit result\n  function mulDivRoundingUp(\n    uint256 a,\n    uint256 b,\n    uint256 denominator\n  ) internal pure returns (uint256 result) {\n    unchecked {\n      result = mulDiv(a, b, denominator);\n      if (mulmod(a, b, denominator) > 0) {\n        require(result < type(uint256).max);\n        result++;\n      }\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "solidity/interfaces/peripherals/IKeep3rDisputable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\n/// @title Keep3rDisputable contract\n/// @notice Creates/resolves disputes for jobs or keepers\n///         A disputed keeper is slashable and is not able to bond, activate, withdraw or receive direct payments\n///         A disputed job is slashable and is not able to pay the keepers, withdraw tokens or to migrate\ninterface IKeep3rDisputable {\n  /// @notice Emitted when a keeper or a job is disputed\n  /// @param _jobOrKeeper The address of the disputed keeper/job\n  /// @param _disputer The user that called the function and disputed the keeper\n  event Dispute(address indexed _jobOrKeeper, address indexed _disputer);\n\n  /// @notice Emitted when a dispute is resolved\n  /// @param _jobOrKeeper The address of the disputed keeper/job\n  /// @param _resolver The user that called the function and resolved the dispute\n  event Resolve(address indexed _jobOrKeeper, address indexed _resolver);\n\n  /// @notice Throws when a job or keeper is already disputed\n  error AlreadyDisputed();\n\n  /// @notice Throws when a job or keeper is not disputed and someone tries to resolve the dispute\n  error NotDisputed();\n\n  /// @notice Allows governance to create a dispute for a given keeper/job\n  /// @param _jobOrKeeper The address in dispute\n  function dispute(address _jobOrKeeper) external;\n\n  /// @notice Allows governance to resolve a dispute on a keeper/job\n  /// @param _jobOrKeeper The address cleared\n  function resolve(address _jobOrKeeper) external;\n}\n"
    },
    "solidity/contracts/peripherals/jobs/Keep3rJobMigration.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../../interfaces/peripherals/IKeep3rJobs.sol';\nimport './Keep3rJobFundableCredits.sol';\nimport './Keep3rJobFundableLiquidity.sol';\n\nabstract contract Keep3rJobMigration is IKeep3rJobMigration, Keep3rJobFundableCredits, Keep3rJobFundableLiquidity {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  uint256 internal constant _MIGRATION_COOLDOWN = 1 minutes;\n\n  /// @inheritdoc IKeep3rJobMigration\n  mapping(address => address) public override pendingJobMigrations;\n  mapping(address => mapping(address => uint256)) internal _migrationCreatedAt;\n\n  /// @inheritdoc IKeep3rJobMigration\n  function migrateJob(address _fromJob, address _toJob) external override onlyJobOwner(_fromJob) {\n    if (_fromJob == _toJob) revert JobMigrationImpossible();\n\n    pendingJobMigrations[_fromJob] = _toJob;\n    _migrationCreatedAt[_fromJob][_toJob] = block.timestamp;\n\n    emit JobMigrationRequested(_fromJob, _toJob);\n  }\n\n  /// @inheritdoc IKeep3rJobMigration\n  function acceptJobMigration(address _fromJob, address _toJob) external override onlyJobOwner(_toJob) {\n    if (disputes[_fromJob] || disputes[_toJob]) revert JobDisputed();\n    if (pendingJobMigrations[_fromJob] != _toJob) revert JobMigrationUnavailable();\n    if (block.timestamp < _migrationCreatedAt[_fromJob][_toJob] + _MIGRATION_COOLDOWN) revert JobMigrationLocked();\n\n    // force job credits update for both jobs\n    _settleJobAccountance(_fromJob);\n    _settleJobAccountance(_toJob);\n\n    // migrate tokens\n    while (_jobTokens[_fromJob].length() > 0) {\n      address _tokenToMigrate = _jobTokens[_fromJob].at(0);\n      jobTokenCredits[_toJob][_tokenToMigrate] += jobTokenCredits[_fromJob][_tokenToMigrate];\n      delete jobTokenCredits[_fromJob][_tokenToMigrate];\n      _jobTokens[_fromJob].remove(_tokenToMigrate);\n      _jobTokens[_toJob].add(_tokenToMigrate);\n    }\n\n    // migrate liquidities\n    while (_jobLiquidities[_fromJob].length() > 0) {\n      address _liquidity = _jobLiquidities[_fromJob].at(0);\n\n      liquidityAmount[_toJob][_liquidity] += liquidityAmount[_fromJob][_liquidity];\n      delete liquidityAmount[_fromJob][_liquidity];\n\n      _jobLiquidities[_toJob].add(_liquidity);\n      _jobLiquidities[_fromJob].remove(_liquidity);\n    }\n\n    // migrate job balances\n    _jobPeriodCredits[_toJob] += _jobPeriodCredits[_fromJob];\n    delete _jobPeriodCredits[_fromJob];\n\n    _jobLiquidityCredits[_toJob] += _jobLiquidityCredits[_fromJob];\n    delete _jobLiquidityCredits[_fromJob];\n\n    // stop _fromJob from being a job\n    delete rewardedAt[_fromJob];\n    _jobs.remove(_fromJob);\n\n    // delete unused data slots\n    delete jobOwner[_fromJob];\n    delete jobPendingOwner[_fromJob];\n    delete _migrationCreatedAt[_fromJob][_toJob];\n    delete pendingJobMigrations[_fromJob];\n\n    emit JobMigrationSuccessful(_fromJob, _toJob);\n  }\n}\n"
    },
    "solidity/contracts/peripherals/keepers/Keep3rKeeperDisputable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './Keep3rKeeperFundable.sol';\nimport '../Keep3rDisputable.sol';\nimport '../../../interfaces/external/IKeep3rV1.sol';\nimport '../../../interfaces/peripherals/IKeep3rKeepers.sol';\n\nabstract contract Keep3rKeeperDisputable is IKeep3rKeeperDisputable, Keep3rDisputable, Keep3rKeeperFundable {\n  using EnumerableSet for EnumerableSet.AddressSet;\n  using SafeERC20 for IERC20;\n\n  /// @inheritdoc IKeep3rKeeperDisputable\n  function slash(\n    address _keeper,\n    address _bonded,\n    uint256 _bondAmount,\n    uint256 _unbondAmount\n  ) public override onlySlasher {\n    if (!disputes[_keeper]) revert NotDisputed();\n    _slash(_keeper, _bonded, _bondAmount, _unbondAmount);\n    emit KeeperSlash(_keeper, msg.sender, _bondAmount + _unbondAmount);\n  }\n\n  /// @inheritdoc IKeep3rKeeperDisputable\n  function revoke(address _keeper) external override onlySlasher {\n    if (!disputes[_keeper]) revert NotDisputed();\n    _keepers.remove(_keeper);\n    _slash(_keeper, keep3rV1, bonds[_keeper][keep3rV1], pendingUnbonds[_keeper][keep3rV1]);\n    emit KeeperRevoke(_keeper, msg.sender);\n  }\n\n  function _slash(\n    address _keeper,\n    address _bonded,\n    uint256 _bondAmount,\n    uint256 _unbondAmount\n  ) internal {\n    if (_bonded != keep3rV1) {\n      try IERC20(_bonded).transfer(governance, _bondAmount + _unbondAmount) returns (bool) {} catch (bytes memory) {}\n    }\n    bonds[_keeper][_bonded] -= _bondAmount;\n    pendingUnbonds[_keeper][_bonded] -= _unbondAmount;\n  }\n}\n"
    },
    "solidity/contracts/peripherals/keepers/Keep3rKeeperFundable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../Keep3rAccountance.sol';\nimport '../Keep3rParameters.sol';\nimport '../../../interfaces/peripherals/IKeep3rKeepers.sol';\n\nimport '../../../interfaces/external/IKeep3rV1.sol';\nimport '../../../interfaces/external/IKeep3rV1Proxy.sol';\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nabstract contract Keep3rKeeperFundable is IKeep3rKeeperFundable, ReentrancyGuard, Keep3rParameters {\n  using EnumerableSet for EnumerableSet.AddressSet;\n  using SafeERC20 for IERC20;\n\n  /// @inheritdoc IKeep3rKeeperFundable\n  function bond(address _bonding, uint256 _amount) external override nonReentrant {\n    if (disputes[msg.sender]) revert Disputed();\n    if (_jobs.contains(msg.sender)) revert AlreadyAJob();\n    canActivateAfter[msg.sender][_bonding] = block.timestamp + bondTime;\n\n    uint256 _before = IERC20(_bonding).balanceOf(address(this));\n    IERC20(_bonding).safeTransferFrom(msg.sender, address(this), _amount);\n    _amount = IERC20(_bonding).balanceOf(address(this)) - _before;\n\n    hasBonded[msg.sender] = true;\n    pendingBonds[msg.sender][_bonding] += _amount;\n\n    emit Bonding(msg.sender, _bonding, _amount);\n  }\n\n  /// @inheritdoc IKeep3rKeeperFundable\n  function activate(address _bonding) external override {\n    if (disputes[msg.sender]) revert Disputed();\n    if (canActivateAfter[msg.sender][_bonding] == 0) revert BondsUnexistent();\n    if (canActivateAfter[msg.sender][_bonding] >= block.timestamp) revert BondsLocked();\n\n    delete canActivateAfter[msg.sender][_bonding];\n\n    uint256 _amount = _activate(msg.sender, _bonding);\n    emit Activation(msg.sender, _bonding, _amount);\n  }\n\n  /// @inheritdoc IKeep3rKeeperFundable\n  function unbond(address _bonding, uint256 _amount) external override {\n    canWithdrawAfter[msg.sender][_bonding] = block.timestamp + unbondTime;\n    bonds[msg.sender][_bonding] -= _amount;\n    pendingUnbonds[msg.sender][_bonding] += _amount;\n\n    emit Unbonding(msg.sender, _bonding, _amount);\n  }\n\n  /// @inheritdoc IKeep3rKeeperFundable\n  function withdraw(address _bonding) external override nonReentrant {\n    if (pendingUnbonds[msg.sender][_bonding] == 0) revert UnbondsUnexistent();\n    if (canWithdrawAfter[msg.sender][_bonding] >= block.timestamp) revert UnbondsLocked();\n    if (disputes[msg.sender]) revert Disputed();\n\n    uint256 _amount = pendingUnbonds[msg.sender][_bonding];\n\n    if (_bonding == keep3rV1) {\n      IKeep3rV1Proxy(keep3rV1Proxy).mint(_amount);\n    }\n\n    delete pendingUnbonds[msg.sender][_bonding];\n    delete canWithdrawAfter[msg.sender][_bonding];\n\n    IERC20(_bonding).safeTransfer(msg.sender, _amount);\n\n    emit Withdrawal(msg.sender, _bonding, _amount);\n  }\n\n  function _activate(address _keeper, address _bonding) internal returns (uint256 _amount) {\n    if (firstSeen[_keeper] == 0) {\n      firstSeen[_keeper] = block.timestamp;\n    }\n    _keepers.add(_keeper);\n    _amount = pendingBonds[_keeper][_bonding];\n    delete pendingBonds[_keeper][_bonding];\n\n    // bond provided tokens\n    bonds[_keeper][_bonding] += _amount;\n    if (_bonding == keep3rV1) {\n      IKeep3rV1(keep3rV1).burn(_amount);\n    }\n  }\n}\n"
    },
    "solidity/interfaces/external/IKeep3rV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\n\n// solhint-disable func-name-mixedcase\ninterface IKeep3rV1 is IERC20, IERC20Metadata {\n  // Structs\n  struct Checkpoint {\n    uint32 fromBlock;\n    uint256 votes;\n  }\n\n  // Events\n  event DelegateChanged(address indexed _delegator, address indexed _fromDelegate, address indexed _toDelegate);\n  event DelegateVotesChanged(address indexed _delegate, uint256 _previousBalance, uint256 _newBalance);\n  event SubmitJob(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _block, uint256 _credit);\n  event ApplyCredit(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _block, uint256 _credit);\n  event RemoveJob(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _block, uint256 _credit);\n  event UnbondJob(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _block, uint256 _credit);\n  event JobAdded(address indexed _job, uint256 _block, address _governance);\n  event JobRemoved(address indexed _job, uint256 _block, address _governance);\n  event KeeperWorked(address indexed _credit, address indexed _job, address indexed _keeper, uint256 _block, uint256 _amount);\n  event KeeperBonding(address indexed _keeper, uint256 _block, uint256 _active, uint256 _bond);\n  event KeeperBonded(address indexed _keeper, uint256 _block, uint256 _activated, uint256 _bond);\n  event KeeperUnbonding(address indexed _keeper, uint256 _block, uint256 _deactive, uint256 _bond);\n  event KeeperUnbound(address indexed _keeper, uint256 _block, uint256 _deactivated, uint256 _bond);\n  event KeeperSlashed(address indexed _keeper, address indexed _slasher, uint256 _block, uint256 _slash);\n  event KeeperDispute(address indexed _keeper, uint256 _block);\n  event KeeperResolved(address indexed _keeper, uint256 _block);\n  event TokenCreditAddition(address indexed _credit, address indexed _job, address indexed _creditor, uint256 _block, uint256 _amount);\n\n  // Variables\n  function KPRH() external returns (address);\n\n  function delegates(address _delegator) external view returns (address);\n\n  function checkpoints(address _account, uint32 _checkpoint) external view returns (Checkpoint memory);\n\n  function numCheckpoints(address _account) external view returns (uint32);\n\n  function DOMAIN_TYPEHASH() external returns (bytes32);\n\n  function DOMAINSEPARATOR() external returns (bytes32);\n\n  function DELEGATION_TYPEHASH() external returns (bytes32);\n\n  function PERMIT_TYPEHASH() external returns (bytes32);\n\n  function nonces(address _user) external view returns (uint256);\n\n  function BOND() external returns (uint256);\n\n  function UNBOND() external returns (uint256);\n\n  function LIQUIDITYBOND() external returns (uint256);\n\n  function FEE() external returns (uint256);\n\n  function BASE() external returns (uint256);\n\n  function ETH() external returns (address);\n\n  function bondings(address _user, address _bonding) external view returns (uint256);\n\n  function canWithdrawAfter(address _user, address _bonding) external view returns (uint256);\n\n  function pendingUnbonds(address _keeper, address _bonding) external view returns (uint256);\n\n  function pendingbonds(address _keeper, address _bonding) external view returns (uint256);\n\n  function bonds(address _keeper, address _bonding) external view returns (uint256);\n\n  function votes(address _delegator) external view returns (uint256);\n\n  function firstSeen(address _keeper) external view returns (uint256);\n\n  function disputes(address _keeper) external view returns (bool);\n\n  function lastJob(address _keeper) external view returns (uint256);\n\n  function workCompleted(address _keeper) external view returns (uint256);\n\n  function jobs(address _job) external view returns (bool);\n\n  function credits(address _job, address _credit) external view returns (uint256);\n\n  function liquidityProvided(\n    address _provider,\n    address _liquidity,\n    address _job\n  ) external view returns (uint256);\n\n  function liquidityUnbonding(\n    address _provider,\n    address _liquidity,\n    address _job\n  ) external view returns (uint256);\n\n  function liquidityAmountsUnbonding(\n    address _provider,\n    address _liquidity,\n    address _job\n  ) external view returns (uint256);\n\n  function jobProposalDelay(address _job) external view returns (uint256);\n\n  function liquidityApplied(\n    address _provider,\n    address _liquidity,\n    address _job\n  ) external view returns (uint256);\n\n  function liquidityAmount(\n    address _provider,\n    address _liquidity,\n    address _job\n  ) external view returns (uint256);\n\n  function keepers(address _keeper) external view returns (bool);\n\n  function blacklist(address _keeper) external view returns (bool);\n\n  function keeperList(uint256 _index) external view returns (address);\n\n  function jobList(uint256 _index) external view returns (address);\n\n  function governance() external returns (address);\n\n  function pendingGovernance() external returns (address);\n\n  function liquidityAccepted(address _liquidity) external view returns (bool);\n\n  function liquidityPairs(uint256 _index) external view returns (address);\n\n  // Methods\n  function getCurrentVotes(address _account) external view returns (uint256);\n\n  function addCreditETH(address _job) external payable;\n\n  function addCredit(\n    address _credit,\n    address _job,\n    uint256 _amount\n  ) external;\n\n  function addVotes(address _voter, uint256 _amount) external;\n\n  function removeVotes(address _voter, uint256 _amount) external;\n\n  function addKPRCredit(address _job, uint256 _amount) external;\n\n  function approveLiquidity(address _liquidity) external;\n\n  function revokeLiquidity(address _liquidity) external;\n\n  function pairs() external view returns (address[] memory);\n\n  function addLiquidityToJob(\n    address _liquidity,\n    address _job,\n    uint256 _amount\n  ) external;\n\n  function applyCreditToJob(\n    address _provider,\n    address _liquidity,\n    address _job\n  ) external;\n\n  function unbondLiquidityFromJob(\n    address _liquidity,\n    address _job,\n    uint256 _amount\n  ) external;\n\n  function removeLiquidityFromJob(address _liquidity, address _job) external;\n\n  function mint(uint256 _amount) external;\n\n  function burn(uint256 _amount) external;\n\n  function worked(address _keeper) external;\n\n  function receipt(\n    address _credit,\n    address _keeper,\n    uint256 _amount\n  ) external;\n\n  function receiptETH(address _keeper, uint256 _amount) external;\n\n  function addJob(address _job) external;\n\n  function getJobs() external view returns (address[] memory);\n\n  function removeJob(address _job) external;\n\n  function setKeep3rHelper(address _keep3rHelper) external;\n\n  function setGovernance(address _governance) external;\n\n  function acceptGovernance() external;\n\n  function isKeeper(address _keeper) external returns (bool);\n\n  function isMinKeeper(\n    address _keeper,\n    uint256 _minBond,\n    uint256 _earned,\n    uint256 _age\n  ) external returns (bool);\n\n  function isBondedKeeper(\n    address _keeper,\n    address _bond,\n    uint256 _minBond,\n    uint256 _earned,\n    uint256 _age\n  ) external returns (bool);\n\n  function bond(address _bonding, uint256 _amount) external;\n\n  function getKeepers() external view returns (address[] memory);\n\n  function activate(address _bonding) external;\n\n  function unbond(address _bonding, uint256 _amount) external;\n\n  function slash(\n    address _bonded,\n    address _keeper,\n    uint256 _amount\n  ) external;\n\n  function withdraw(address _bonding) external;\n\n  function dispute(address _keeper) external;\n\n  function revoke(address _keeper) external;\n\n  function resolve(address _keeper) external;\n\n  function permit(\n    address _owner,\n    address _spender,\n    uint256 _amount,\n    uint256 _deadline,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external;\n}\n"
    },
    "solidity/interfaces/peripherals/IKeep3rKeepers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\n/// @title Keep3rKeeperFundable contract\n/// @notice Handles the actions required to become a keeper\ninterface IKeep3rKeeperFundable {\n  // Events\n\n  /// @notice Emitted when Keep3rKeeperFundable#activate is called\n  /// @param _keeper The keeper that has been activated\n  /// @param _bond The asset the keeper has bonded\n  /// @param _amount The amount of the asset the keeper has bonded\n  event Activation(address indexed _keeper, address indexed _bond, uint256 _amount);\n\n  /// @notice Emitted when Keep3rKeeperFundable#withdraw is called\n  /// @param _keeper The caller of Keep3rKeeperFundable#withdraw function\n  /// @param _bond The asset to withdraw from the bonding pool\n  /// @param _amount The amount of funds withdrawn\n  event Withdrawal(address indexed _keeper, address indexed _bond, uint256 _amount);\n\n  // Errors\n\n  /// @notice Throws when the address that is trying to register as a job is already a job\n  error AlreadyAJob();\n\n  // Methods\n\n  /// @notice Beginning of the bonding process\n  /// @param _bonding The asset being bonded\n  /// @param _amount The amount of bonding asset being bonded\n  function bond(address _bonding, uint256 _amount) external;\n\n  /// @notice Beginning of the unbonding process\n  /// @param _bonding The asset being unbonded\n  /// @param _amount Allows for partial unbonding\n  function unbond(address _bonding, uint256 _amount) external;\n\n  /// @notice End of the bonding process after bonding time has passed\n  /// @param _bonding The asset being activated as bond collateral\n  function activate(address _bonding) external;\n\n  /// @notice Withdraw funds after unbonding has finished\n  /// @param _bonding The asset to withdraw from the bonding pool\n  function withdraw(address _bonding) external;\n}\n\n/// @title Keep3rKeeperDisputable contract\n/// @notice Handles the actions that can be taken on a disputed keeper\ninterface IKeep3rKeeperDisputable {\n  // Events\n\n  /// @notice Emitted when Keep3rKeeperDisputable#slash is called\n  /// @param _keeper The address of the slashed keeper\n  /// @param _slasher The user that called Keep3rKeeperDisputable#slash\n  /// @param _amount The amount of credits slashed from the keeper\n  event KeeperSlash(address indexed _keeper, address indexed _slasher, uint256 _amount);\n\n  /// @notice Emitted when Keep3rKeeperDisputable#revoke is called\n  /// @param _keeper The address of the revoked keeper\n  /// @param _slasher The user that called Keep3rKeeperDisputable#revoke\n  event KeeperRevoke(address indexed _keeper, address indexed _slasher);\n\n  // Methods\n\n  /// @notice Allows governance to slash a keeper based on a dispute\n  /// @param _keeper The address being slashed\n  /// @param _bonded The asset being slashed\n  /// @param _bondAmount The bonded amount being slashed\n  /// @param _unbondAmount The pending unbond amount being slashed\n  function slash(\n    address _keeper,\n    address _bonded,\n    uint256 _bondAmount,\n    uint256 _unbondAmount\n  ) external;\n\n  /// @notice Blacklists a keeper from participating in the network\n  /// @param _keeper The address being slashed\n  function revoke(address _keeper) external;\n}\n\n// solhint-disable-next-line no-empty-blocks\n\n/// @title Keep3rKeepers contract\ninterface IKeep3rKeepers is IKeep3rKeeperDisputable {\n\n}\n"
    },
    "solidity/interfaces/external/IKeep3rV1Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../peripherals/IGovernable.sol';\n\ninterface IKeep3rV1Proxy is IGovernable {\n  // Structs\n  struct Recipient {\n    address recipient;\n    uint256 caps;\n  }\n\n  // Variables\n  function keep3rV1() external view returns (address);\n\n  function minter() external view returns (address);\n\n  function next(address) external view returns (uint256);\n\n  function caps(address) external view returns (uint256);\n\n  function recipients() external view returns (address[] memory);\n\n  function recipientsCaps() external view returns (Recipient[] memory);\n\n  // Errors\n  error Cooldown();\n  error NoDrawableAmount();\n  error ZeroAddress();\n  error OnlyMinter();\n\n  // Methods\n  function addRecipient(address recipient, uint256 amount) external;\n\n  function removeRecipient(address recipient) external;\n\n  function draw() external returns (uint256 _amount);\n\n  function setKeep3rV1(address _keep3rV1) external;\n\n  function setMinter(address _minter) external;\n\n  function mint(uint256 _amount) external;\n\n  function mint(address _account, uint256 _amount) external;\n\n  function setKeep3rV1Governance(address _governance) external;\n\n  function acceptKeep3rV1Governance() external;\n\n  function dispute(address _keeper) external;\n\n  function slash(\n    address _bonded,\n    address _keeper,\n    uint256 _amount\n  ) external;\n\n  function revoke(address _keeper) external;\n\n  function resolve(address _keeper) external;\n\n  function addJob(address _job) external;\n\n  function removeJob(address _job) external;\n\n  function addKPRCredit(address _job, uint256 _amount) external;\n\n  function approveLiquidity(address _liquidity) external;\n\n  function revokeLiquidity(address _liquidity) external;\n\n  function setKeep3rHelper(address _keep3rHelper) external;\n\n  function addVotes(address _voter, uint256 _amount) external;\n\n  function removeVotes(address _voter, uint256 _amount) external;\n}\n"
    },
    "solidity/interfaces/peripherals/IDustCollector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport './IBaseErrors.sol';\n\ninterface IDustCollector is IBaseErrors {\n  /// @notice Emitted when dust is sent\n  /// @param _token The token that will be transferred\n  /// @param _amount The amount of the token that will be transferred\n  /// @param _to The address which will receive the funds\n  event DustSent(address _token, uint256 _amount, address _to);\n\n  /// @notice Allows an authorized user to transfer the tokens or eth that may have been left in a contract\n  /// @param _token The token that will be transferred\n  /// @param _amount The amount of the token that will be transferred\n  /// @param _to The address that will receive the idle funds\n  function sendDust(\n    address _token,\n    uint256 _amount,\n    address _to\n  ) external;\n}\n"
    },
    "solidity/for-test/Keep3rForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../contracts/Keep3r.sol';\n\ncontract Keep3rForTest is Keep3r {\n  constructor(\n    address _governance,\n    address _keep3rHelper,\n    address _keep3rV1,\n    address _keep3rV1Proxy,\n    address _kp3rWethPool\n  ) Keep3r(_governance, _keep3rHelper, _keep3rV1, _keep3rV1Proxy, _kp3rWethPool) {}\n\n  function viewTickOrder(address _liquidity) external view returns (bool) {\n    return _isKP3RToken0[_liquidity];\n  }\n}\n"
    },
    "solidity/for-test/peripherals/DustCollectorForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../contracts/peripherals/DustCollector.sol';\n\ncontract DustCollectorForTest is DustCollector {\n  constructor() DustCollector() Governable(msg.sender) {}\n}\n"
    },
    "solidity/interfaces/IKeep3r.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './peripherals/IKeep3rJobs.sol';\nimport './peripherals/IKeep3rKeepers.sol';\nimport './peripherals/IKeep3rAccountance.sol';\nimport './peripherals/IKeep3rRoles.sol';\nimport './peripherals/IKeep3rParameters.sol';\n\n// solhint-disable-next-line no-empty-blocks\n\n/// @title Keep3rV2 contract\n/// @notice This contract inherits all the functionality of Keep3rV2\ninterface IKeep3r is IKeep3rJobs, IKeep3rKeepers, IKeep3rAccountance, IKeep3rRoles, IKeep3rParameters {\n\n}\n"
    },
    "solidity/for-test/JobForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../interfaces/IKeep3r.sol';\n\ncontract JobForTest {\n  error InvalidKeeper();\n  address public keep3r;\n  uint256 public nonce;\n\n  constructor(address _keep3r) {\n    keep3r = _keep3r;\n  }\n\n  function work() external {\n    if (!IKeep3r(keep3r).isKeeper(msg.sender)) revert InvalidKeeper();\n\n    for (uint256 i; i < 1000; i++) {\n      nonce++;\n    }\n\n    IKeep3r(keep3r).worked(msg.sender);\n  }\n\n  function workHard(uint256 _factor) external {\n    if (!IKeep3r(keep3r).isKeeper(msg.sender)) revert InvalidKeeper();\n\n    for (uint256 i; i < 1000 * _factor; i++) {\n      nonce++;\n    }\n\n    IKeep3r(keep3r).worked(msg.sender);\n  }\n}\n"
    },
    "solidity/for-test/BasicJob.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../interfaces/IKeep3r.sol';\n\ncontract BasicJob {\n  error KeeperNotValid();\n\n  address public keep3r;\n  uint256 public nonce;\n  uint256[] public array;\n\n  constructor(address _keep3r) {\n    keep3r = _keep3r;\n  }\n\n  function work() external upkeep {}\n\n  function workHard(uint256 _howHard) external upkeep {\n    for (uint256 i = nonce; i < _howHard; i++) {\n      nonce++;\n    }\n  }\n\n  function workRefund(uint256 _howHard) external upkeep {\n    for (uint256 i; i < _howHard; i++) {\n      array.push(i);\n    }\n\n    while (array.length > 0) {\n      array.pop();\n    }\n  }\n\n  modifier upkeep() {\n    IKeep3r(keep3r).isKeeper(msg.sender);\n    _;\n    IKeep3r(keep3r).worked(msg.sender);\n  }\n}\n"
    },
    "solidity/contracts/Keep3rHelperParameters.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.7 <0.9.0;\n\nimport './libraries/FullMath.sol';\nimport './libraries/TickMath.sol';\nimport '../interfaces/IKeep3r.sol';\nimport '../interfaces/external/IKeep3rV1.sol';\nimport '../interfaces/IKeep3rHelperParameters.sol';\nimport './peripherals/Governable.sol';\nimport './Keep3rHelperParameters.sol';\n\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\ncontract Keep3rHelperParameters is IKeep3rHelperParameters, Governable {\n  /// @inheritdoc IKeep3rHelperParameters\n  address public constant override KP3R = 0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44;\n\n  /// @inheritdoc IKeep3rHelperParameters\n  uint256 public constant override BOOST_BASE = 10_000;\n\n  /// @inheritdoc IKeep3rHelperParameters\n  uint256 public override minBoost = 11_000;\n\n  /// @inheritdoc IKeep3rHelperParameters\n  uint256 public override maxBoost = 12_000;\n\n  /// @inheritdoc IKeep3rHelperParameters\n  uint256 public override targetBond = 200 ether;\n\n  /// @inheritdoc IKeep3rHelperParameters\n  uint256 public override workExtraGas = 50_000;\n\n  /// @inheritdoc IKeep3rHelperParameters\n  uint32 public override quoteTwapTime = 10 minutes;\n\n  /// @inheritdoc IKeep3rHelperParameters\n  uint256 public override minBaseFee = 15e9;\n\n  /// @inheritdoc IKeep3rHelperParameters\n  uint256 public override minPriorityFee = 2e9;\n\n  /// @inheritdoc IKeep3rHelperParameters\n  address public override keep3rV2;\n\n  /// @inheritdoc IKeep3rHelperParameters\n  IKeep3rHelperParameters.Kp3rWethPool public override kp3rWethPool;\n\n  constructor(address _keep3rV2, address _governance) Governable(_governance) {\n    keep3rV2 = _keep3rV2;\n    _setKp3rWethPool(0x11B7a6bc0259ed6Cf9DB8F499988F9eCc7167bf5);\n  }\n\n  /// @inheritdoc IKeep3rHelperParameters\n  function setKp3rWethPool(address _poolAddress) external override onlyGovernance {\n    _setKp3rWethPool(_poolAddress);\n    emit Kp3rWethPoolChange(kp3rWethPool.poolAddress, kp3rWethPool.isKP3RToken0);\n  }\n\n  /// @inheritdoc IKeep3rHelperParameters\n  function setMinBoost(uint256 _minBoost) external override onlyGovernance {\n    minBoost = _minBoost;\n    emit MinBoostChange(minBoost);\n  }\n\n  /// @inheritdoc IKeep3rHelperParameters\n  function setMaxBoost(uint256 _maxBoost) external override onlyGovernance {\n    maxBoost = _maxBoost;\n    emit MaxBoostChange(maxBoost);\n  }\n\n  /// @inheritdoc IKeep3rHelperParameters\n  function setTargetBond(uint256 _targetBond) external override onlyGovernance {\n    targetBond = _targetBond;\n    emit TargetBondChange(targetBond);\n  }\n\n  /// @inheritdoc IKeep3rHelperParameters\n  function setKeep3rV2(address _keep3rV2) external override onlyGovernance {\n    keep3rV2 = _keep3rV2;\n    emit Keep3rV2Change(keep3rV2);\n  }\n\n  /// @inheritdoc IKeep3rHelperParameters\n  function setWorkExtraGas(uint256 _workExtraGas) external override onlyGovernance {\n    workExtraGas = _workExtraGas;\n    emit WorkExtraGasChange(workExtraGas);\n  }\n\n  /// @inheritdoc IKeep3rHelperParameters\n  function setQuoteTwapTime(uint32 _quoteTwapTime) external override onlyGovernance {\n    quoteTwapTime = _quoteTwapTime;\n    emit QuoteTwapTimeChange(quoteTwapTime);\n  }\n\n  /// @inheritdoc IKeep3rHelperParameters\n  function setMinBaseFee(uint256 _minBaseFee) external override onlyGovernance {\n    minBaseFee = _minBaseFee;\n    emit MinBaseFeeChange(minBaseFee);\n  }\n\n  /// @inheritdoc IKeep3rHelperParameters\n  function setMinPriorityFee(uint256 _minPriorityFee) external override onlyGovernance {\n    minPriorityFee = _minPriorityFee;\n    emit MinPriorityFeeChange(minPriorityFee);\n  }\n\n  /// @notice Sets KP3R-WETH pool\n  /// @param _poolAddress The address of the KP3R-WETH pool\n  function _setKp3rWethPool(address _poolAddress) internal {\n    bool _isKP3RToken0 = IUniswapV3Pool(_poolAddress).token0() == KP3R;\n    bool _isKP3RToken1 = IUniswapV3Pool(_poolAddress).token1() == KP3R;\n\n    if (!_isKP3RToken0 && !_isKP3RToken1) revert InvalidKp3rPool();\n\n    kp3rWethPool = Kp3rWethPool(_poolAddress, _isKP3RToken0);\n  }\n}\n"
    },
    "solidity/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n// solhint-disable\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n///         prices between 2**-128 and 2**128\nlibrary TickMath {\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n  int24 internal constant MIN_TICK = -887272;\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n  int24 internal constant MAX_TICK = -MIN_TICK;\n\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\n  /// @dev Throws if |tick| > max tick\n  /// @param tick The input tick for the above formula\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n  ///         at the given tick\n  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n    uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n    require(absTick <= uint256(int256(MAX_TICK)), 'T');\n\n    uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n    if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n    if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n    if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n    if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n    if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n    if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n    if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n    if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n    if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n    if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n    if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n    if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n    if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n    if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n    if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n    if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n    if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n    if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n    if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n    if (tick > 0) ratio = type(uint256).max / ratio;\n\n    // Divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n    sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n  }\n\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n  /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may ever return.\n  /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n  function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n    // Second inequality must be < because the price can never reach the price at the max tick\n    require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n    uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n    uint256 r = ratio;\n    uint256 msb = 0;\n\n    assembly {\n      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n      msb := or(msb, f)\n      r := shr(f, r)\n    }\n    assembly {\n      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n      msb := or(msb, f)\n      r := shr(f, r)\n    }\n    assembly {\n      let f := shl(5, gt(r, 0xFFFFFFFF))\n      msb := or(msb, f)\n      r := shr(f, r)\n    }\n    assembly {\n      let f := shl(4, gt(r, 0xFFFF))\n      msb := or(msb, f)\n      r := shr(f, r)\n    }\n    assembly {\n      let f := shl(3, gt(r, 0xFF))\n      msb := or(msb, f)\n      r := shr(f, r)\n    }\n    assembly {\n      let f := shl(2, gt(r, 0xF))\n      msb := or(msb, f)\n      r := shr(f, r)\n    }\n    assembly {\n      let f := shl(1, gt(r, 0x3))\n      msb := or(msb, f)\n      r := shr(f, r)\n    }\n    assembly {\n      let f := gt(r, 0x1)\n      msb := or(msb, f)\n    }\n\n    if (msb >= 128) r = ratio >> (msb - 127);\n    else r = ratio << (127 - msb);\n\n    int256 log_2 = (int256(msb) - 128) << 64;\n\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(63, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(62, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(61, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(60, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(59, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(58, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(57, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(56, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(55, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(54, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(53, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(52, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(51, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(50, f))\n    }\n\n    int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n    int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n    int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n    tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n  }\n}\n"
    },
    "solidity/interfaces/IKeep3rHelperParameters.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\n/// @title Keep3rHelperParameters contract\n/// @notice Contains all the helper functions used throughout the different files.\ninterface IKeep3rHelperParameters {\n  // Structs\n\n  /// @dev KP3R-WETH Pool address and isKP3RToken0\n  /// @dev Created in order to save gas by avoiding calls to pool's token0 method\n  struct Kp3rWethPool {\n    address poolAddress;\n    bool isKP3RToken0;\n  }\n\n  // Errors\n\n  /// @notice Throws when pool does not have KP3R as token0 nor token1\n  error InvalidKp3rPool();\n\n  // Events\n\n  /// @notice Emitted when the kp3r weth pool is changed\n  /// @param _address Address of the new kp3r weth pool\n  /// @param _isKP3RToken0 True if calling the token0 method of the pool returns the KP3R token address\n  event Kp3rWethPoolChange(address _address, bool _isKP3RToken0);\n\n  /// @notice Emitted when the minimum boost multiplier is changed\n  /// @param _minBoost The minimum boost multiplier\n  event MinBoostChange(uint256 _minBoost);\n\n  /// @notice Emitted when the maximum boost multiplier is changed\n  /// @param _maxBoost The maximum boost multiplier\n  event MaxBoostChange(uint256 _maxBoost);\n\n  /// @notice Emitted when the target bond amount is changed\n  /// @param _targetBond The target bond amount\n  event TargetBondChange(uint256 _targetBond);\n\n  /// @notice Emitted when the Keep3r V2 address is changed\n  /// @param _keep3rV2 The address of Keep3r V2\n  event Keep3rV2Change(address _keep3rV2);\n\n  /// @notice Emitted when the work extra gas amount is changed\n  /// @param _workExtraGas The work extra gas\n  event WorkExtraGasChange(uint256 _workExtraGas);\n\n  /// @notice Emitted when the quote twap time is changed\n  /// @param _quoteTwapTime The twap time for quoting\n  event QuoteTwapTimeChange(uint32 _quoteTwapTime);\n\n  /// @notice Emitted when minimum rewarded gas fee is changed\n  /// @param _minBaseFee The minimum rewarded gas fee\n  event MinBaseFeeChange(uint256 _minBaseFee);\n\n  /// @notice Emitted when minimum rewarded priority fee is changed\n  /// @param _minPriorityFee The minimum expected fee that the keeper should pay\n  event MinPriorityFeeChange(uint256 _minPriorityFee);\n\n  // Variables\n\n  /// @notice Address of KP3R token\n  /// @return _kp3r Address of KP3R token\n  // solhint-disable func-name-mixedcase\n  function KP3R() external view returns (address _kp3r);\n\n  /// @notice The boost base used to calculate the boost rewards for the keeper\n  /// @return _base The boost base number\n  function BOOST_BASE() external view returns (uint256 _base);\n\n  /// @notice KP3R-WETH pool that is being used as oracle\n  /// @return poolAddress Address of the pool\n  /// @return isKP3RToken0 True if calling the token0 method of the pool returns the KP3R token address\n  function kp3rWethPool() external view returns (address poolAddress, bool isKP3RToken0);\n\n  /// @notice The minimum multiplier used to calculate the amount of gas paid to the Keeper for the gas used to perform a job\n  ///         For example: if the quoted gas used is 1000, then the minimum amount to be paid will be 1000 * minBoost / BOOST_BASE\n  /// @return _multiplier The minimum boost multiplier\n  function minBoost() external view returns (uint256 _multiplier);\n\n  /// @notice The maximum multiplier used to calculate the amount of gas paid to the Keeper for the gas used to perform a job\n  ///         For example: if the quoted gas used is 1000, then the maximum amount to be paid will be 1000 * maxBoost / BOOST_BASE\n  /// @return _multiplier The maximum boost multiplier\n  function maxBoost() external view returns (uint256 _multiplier);\n\n  /// @notice The targeted amount of bonded KP3Rs to max-up reward multiplier\n  ///         For example: if the amount of KP3R the keeper has bonded is targetBond or more, then the keeper will get\n  ///                      the maximum boost possible in his rewards, if it's less, the reward boost will be proportional\n  /// @return _target The amount of KP3R that comforms the targetBond\n  function targetBond() external view returns (uint256 _target);\n\n  /// @notice The amount of unaccounted gas that is going to be added to keeper payments\n  /// @return _workExtraGas The work unaccounted gas amount\n  function workExtraGas() external view returns (uint256 _workExtraGas);\n\n  /// @notice The twap time for quoting\n  /// @return _quoteTwapTime The twap time\n  function quoteTwapTime() external view returns (uint32 _quoteTwapTime);\n\n  /// @notice The minimum base fee that is used to calculate keeper rewards\n  /// @return _minBaseFee The minimum rewarded gas fee\n  function minBaseFee() external view returns (uint256 _minBaseFee);\n\n  /// @notice The minimum priority fee that is also rewarded for keepers\n  /// @return _minPriorityFee The minimum rewarded priority fee\n  function minPriorityFee() external view returns (uint256 _minPriorityFee);\n\n  /// @notice Address of Keep3r V2\n  /// @return _keep3rV2 Address of Keep3r V2\n  function keep3rV2() external view returns (address _keep3rV2);\n\n  // Methods\n\n  /// @notice Sets KP3R-WETH pool\n  /// @param _poolAddress The address of the KP3R-WETH pool\n  function setKp3rWethPool(address _poolAddress) external;\n\n  /// @notice Sets the minimum boost multiplier\n  /// @param _minBoost The minimum boost multiplier\n  function setMinBoost(uint256 _minBoost) external;\n\n  /// @notice Sets the maximum boost multiplier\n  /// @param _maxBoost The maximum boost multiplier\n  function setMaxBoost(uint256 _maxBoost) external;\n\n  /// @notice Sets the target bond amount\n  /// @param _targetBond The target bond amount\n  function setTargetBond(uint256 _targetBond) external;\n\n  /// @notice Sets the Keep3r V2 address\n  /// @param _keep3rV2 The address of Keep3r V2\n  function setKeep3rV2(address _keep3rV2) external;\n\n  /// @notice Sets the work extra gas amount\n  /// @param _workExtraGas The work extra gas\n  function setWorkExtraGas(uint256 _workExtraGas) external;\n\n  /// @notice Sets the quote twap time\n  /// @param _quoteTwapTime The twap time for quoting\n  function setQuoteTwapTime(uint32 _quoteTwapTime) external;\n\n  /// @notice Sets the minimum rewarded gas fee\n  /// @param _minBaseFee The minimum rewarded gas fee\n  function setMinBaseFee(uint256 _minBaseFee) external;\n\n  /// @notice Sets the minimum rewarded gas priority fee\n  /// @param _minPriorityFee The minimum rewarded priority fee\n  function setMinPriorityFee(uint256 _minPriorityFee) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "solidity/for-test/UniV3PairManagerForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport '../contracts/libraries/LiquidityAmounts.sol';\nimport '../contracts/libraries/PoolAddress.sol';\nimport '../contracts/libraries/FixedPoint96.sol';\nimport '../contracts/libraries/FullMath.sol';\nimport '../contracts/libraries/TickMath.sol';\nimport '../contracts/UniV3PairManager.sol';\nimport '../interfaces/external/IWeth9.sol';\nimport '../interfaces/IUniV3PairManager.sol';\n\ncontract UniV3PairManagerForTest is UniV3PairManager {\n  constructor(address _pool, address _governance) UniV3PairManager(_pool, _governance) {}\n\n  function internalAddLiquidity(\n    uint256 amount0Desired,\n    uint256 amount1Desired,\n    uint256 amount0Min,\n    uint256 amount1Min\n  )\n    external\n    returns (\n      uint128 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    return _addLiquidity(amount0Desired, amount1Desired, amount0Min, amount1Min);\n  }\n\n  function internalPay(\n    address token,\n    address payer,\n    address recipient,\n    uint256 value\n  ) external {\n    return _pay(token, payer, recipient, value);\n  }\n\n  function internalMint(address dst, uint256 amount) external {\n    return _mint(dst, amount);\n  }\n\n  function internalBurn(address dst, uint256 amount) external {\n    return _burn(dst, amount);\n  }\n\n  function internalTransferTokens(\n    address src,\n    address dst,\n    uint256 amount\n  ) external {\n    _transferTokens(src, dst, amount);\n  }\n\n  function internalSafeTransferFrom(\n    address token,\n    address from,\n    address to,\n    uint256 value\n  ) external {\n    _safeTransferFrom(token, from, to, value);\n  }\n\n  receive() external payable {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "solidity/contracts/libraries/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.4 <0.9.0;\n\nimport './FullMath.sol';\nimport './FixedPoint96.sol';\n\n// solhint-disable\nlibrary LiquidityAmounts {\n  function toUint128(uint256 x) private pure returns (uint128 y) {\n    require((y = uint128(x)) == x);\n  }\n\n  function getLiquidityForAmount0(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint256 amount0\n  ) internal pure returns (uint128 liquidity) {\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n    uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\n    return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n  }\n\n  function getLiquidityForAmount1(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint256 amount1\n  ) internal pure returns (uint128 liquidity) {\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n    return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\n  }\n\n  function getLiquidityForAmounts(\n    uint160 sqrtRatioX96,\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint256 amount0,\n    uint256 amount1\n  ) internal pure returns (uint128 liquidity) {\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\n      liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\n      uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n      uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n      liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n    } else {\n      liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n    }\n  }\n\n  function getAmount0ForLiquidity(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint128 liquidity\n  ) internal pure returns (uint256 amount0) {\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n    return FullMath.mulDiv(uint256(liquidity) << FixedPoint96.RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96) / sqrtRatioAX96;\n  }\n\n  function getAmount1ForLiquidity(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint128 liquidity\n  ) internal pure returns (uint256 amount1) {\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n    return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n  }\n\n  function getAmountsForLiquidity(\n    uint160 sqrtRatioX96,\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint128 liquidity\n  ) internal pure returns (uint256 amount0, uint256 amount1) {\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\n      amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\n      amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\n      amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\n    } else {\n      amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n    }\n  }\n}\n"
    },
    "solidity/contracts/libraries/PoolAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.4 <0.9.0;\n\nlibrary PoolAddress {\n  struct PoolKey {\n    address token0;\n    address token1;\n    uint24 fee;\n  }\n}\n"
    },
    "solidity/contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.4 <0.9.0;\n\nlibrary FixedPoint96 {\n  // solhint-disable\n  uint8 internal constant RESOLUTION = 96;\n  uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "solidity/contracts/UniV3PairManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/*\n\nCoded for The Keep3r Network with ♥ by\n\n██████╗░███████╗███████╗██╗  ░██╗░░░░░░░██╗░█████╗░███╗░░██╗██████╗░███████╗██████╗░██╗░░░░░░█████╗░███╗░░██╗██████╗░\n██╔══██╗██╔════╝██╔════╝██║  ░██║░░██╗░░██║██╔══██╗████╗░██║██╔══██╗██╔════╝██╔══██╗██║░░░░░██╔══██╗████╗░██║██╔══██╗\n██║░░██║█████╗░░█████╗░░██║  ░╚██╗████╗██╔╝██║░░██║██╔██╗██║██║░░██║█████╗░░██████╔╝██║░░░░░███████║██╔██╗██║██║░░██║\n██║░░██║██╔══╝░░██╔══╝░░██║  ░░████╔═████║░██║░░██║██║╚████║██║░░██║██╔══╝░░██╔══██╗██║░░░░░██╔══██║██║╚████║██║░░██║\n██████╔╝███████╗██║░░░░░██║  ░░╚██╔╝░╚██╔╝░╚█████╔╝██║░╚███║██████╔╝███████╗██║░░██║███████╗██║░░██║██║░╚███║██████╔╝\n╚═════╝░╚══════╝╚═╝░░░░░╚═╝  ░░░╚═╝░░░╚═╝░░░╚════╝░╚═╝░░╚══╝╚═════╝░╚══════╝╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝╚═╝░░╚══╝╚═════╝░\n\nhttps://defi.sucks\n\n*/\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\nimport './libraries/LiquidityAmounts.sol';\nimport './libraries/PoolAddress.sol';\nimport './libraries/FixedPoint96.sol';\nimport './libraries/FullMath.sol';\nimport './libraries/TickMath.sol';\n\nimport '../interfaces/external/IWeth9.sol';\nimport '../interfaces/IUniV3PairManager.sol';\n\nimport './peripherals/Governable.sol';\n\ncontract UniV3PairManager is IUniV3PairManager, Governable {\n  /// @inheritdoc IERC20Metadata\n  string public override name;\n\n  /// @inheritdoc IERC20Metadata\n  string public override symbol;\n\n  /// @inheritdoc IERC20\n  uint256 public override totalSupply;\n\n  /// @inheritdoc IPairManager\n  address public immutable override factory;\n\n  /// @inheritdoc IPairManager\n  address public immutable override token0;\n\n  /// @inheritdoc IPairManager\n  address public immutable override token1;\n\n  /// @inheritdoc IPairManager\n  address public immutable override pool;\n\n  /// @inheritdoc IUniV3PairManager\n  uint24 public immutable override fee;\n\n  /// @inheritdoc IUniV3PairManager\n  uint160 public immutable override sqrtRatioAX96;\n\n  /// @inheritdoc IUniV3PairManager\n  uint160 public immutable override sqrtRatioBX96;\n\n  /// @inheritdoc IUniV3PairManager\n  int24 public immutable override tickLower;\n\n  /// @inheritdoc IUniV3PairManager\n  int24 public immutable override tickUpper;\n\n  /// @inheritdoc IUniV3PairManager\n  int24 public immutable override tickSpacing;\n\n  /// @notice Uniswap's maximum tick\n  /// @dev Due to tick spacing, pools with different fees may have differences between _MAX_TICK and tickUpper. Use tickUpper to find the max tick of the pool.\n  int24 private constant _MAX_TICK = 887272;\n\n  /// @inheritdoc IERC20Metadata\n  //solhint-disable-next-line const-name-snakecase\n  uint8 public constant override decimals = 18;\n\n  /// @inheritdoc IERC20\n  mapping(address => mapping(address => uint256)) public override allowance;\n\n  /// @inheritdoc IERC20\n  mapping(address => uint256) public override balanceOf;\n\n  /// @notice Struct that contains token0, token1, and fee of the Uniswap pool\n  PoolAddress.PoolKey private _poolKey;\n\n  constructor(address _pool, address _governance) Governable(_governance) {\n    uint24 _fee = IUniswapV3Pool(_pool).fee();\n    address _token0 = IUniswapV3Pool(_pool).token0();\n    address _token1 = IUniswapV3Pool(_pool).token1();\n    int24 _tickSpacing = IUniswapV3Pool(_pool).tickSpacing();\n    int24 _tickUpper = _MAX_TICK - (_MAX_TICK % _tickSpacing);\n    int24 _tickLower = -_tickUpper;\n\n    factory = msg.sender;\n    pool = _pool;\n    fee = _fee;\n    tickSpacing = _tickSpacing;\n    tickUpper = _tickUpper;\n    tickLower = _tickLower;\n    token0 = _token0;\n    token1 = _token1;\n    name = string(abi.encodePacked('Keep3rLP - ', ERC20(_token0).symbol(), '/', ERC20(_token1).symbol()));\n    symbol = string(abi.encodePacked('kLP-', ERC20(_token0).symbol(), '/', ERC20(_token1).symbol()));\n\n    sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(_tickLower);\n    sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(_tickUpper);\n    _poolKey = PoolAddress.PoolKey({token0: _token0, token1: _token1, fee: _fee});\n  }\n\n  // This low-level function should be called from a contract which performs important safety checks\n  /// @inheritdoc IUniV3PairManager\n  function mint(\n    uint256 amount0Desired,\n    uint256 amount1Desired,\n    uint256 amount0Min,\n    uint256 amount1Min,\n    address to\n  ) external override returns (uint128 liquidity) {\n    (liquidity, , ) = _addLiquidity(amount0Desired, amount1Desired, amount0Min, amount1Min);\n    _mint(to, liquidity);\n  }\n\n  /// @inheritdoc IUniV3PairManager\n  function uniswapV3MintCallback(\n    uint256 amount0Owed,\n    uint256 amount1Owed,\n    bytes calldata data\n  ) external override {\n    MintCallbackData memory decoded = abi.decode(data, (MintCallbackData));\n    if (msg.sender != pool) revert OnlyPool();\n    if (amount0Owed > 0) _pay(decoded._poolKey.token0, decoded.payer, pool, amount0Owed);\n    if (amount1Owed > 0) _pay(decoded._poolKey.token1, decoded.payer, pool, amount1Owed);\n  }\n\n  /// @inheritdoc IUniV3PairManager\n  function burn(\n    uint128 liquidity,\n    uint256 amount0Min,\n    uint256 amount1Min,\n    address to\n  ) external override returns (uint256 amount0, uint256 amount1) {\n    (amount0, amount1) = IUniswapV3Pool(pool).burn(tickLower, tickUpper, liquidity);\n\n    if (amount0 < amount0Min || amount1 < amount1Min) revert ExcessiveSlippage();\n\n    IUniswapV3Pool(pool).collect(to, tickLower, tickUpper, uint128(amount0), uint128(amount1));\n    _burn(msg.sender, liquidity);\n  }\n\n  /// @inheritdoc IUniV3PairManager\n  function collect() external override onlyGovernance returns (uint256 amount0, uint256 amount1) {\n    (, , , uint128 tokensOwed0, uint128 tokensOwed1) = IUniswapV3Pool(pool).positions(\n      keccak256(abi.encodePacked(address(this), tickLower, tickUpper))\n    );\n    (amount0, amount1) = IUniswapV3Pool(pool).collect(governance, tickLower, tickUpper, tokensOwed0, tokensOwed1);\n  }\n\n  /// @inheritdoc IUniV3PairManager\n  function position()\n    external\n    view\n    override\n    returns (\n      uint128 liquidity,\n      uint256 feeGrowthInside0LastX128,\n      uint256 feeGrowthInside1LastX128,\n      uint128 tokensOwed0,\n      uint128 tokensOwed1\n    )\n  {\n    (liquidity, feeGrowthInside0LastX128, feeGrowthInside1LastX128, tokensOwed0, tokensOwed1) = IUniswapV3Pool(pool).positions(\n      keccak256(abi.encodePacked(address(this), tickLower, tickUpper))\n    );\n  }\n\n  /// @inheritdoc IERC20\n  function approve(address spender, uint256 amount) external override returns (bool) {\n    allowance[msg.sender][spender] = amount;\n\n    emit Approval(msg.sender, spender, amount);\n    return true;\n  }\n\n  /// @inheritdoc IERC20\n  function transfer(address to, uint256 amount) external override returns (bool) {\n    _transferTokens(msg.sender, to, amount);\n    return true;\n  }\n\n  /// @inheritdoc IERC20\n  function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n  ) external override returns (bool) {\n    address spender = msg.sender;\n    uint256 spenderAllowance = allowance[from][spender];\n\n    if (spender != from && spenderAllowance != type(uint256).max) {\n      uint256 newAllowance = spenderAllowance - amount;\n      allowance[from][spender] = newAllowance;\n\n      emit Approval(from, spender, newAllowance);\n    }\n\n    _transferTokens(from, to, amount);\n    return true;\n  }\n\n  /// @notice Adds liquidity to an initialized pool\n  /// @dev Reverts if the returned amount0 is less than amount0Min or if amount1 is less than amount1Min\n  /// @dev This function calls the mint function of the corresponding Uniswap pool, which in turn calls UniswapV3Callback\n  /// @param amount0Desired The amount of token0 we would like to provide\n  /// @param amount1Desired The amount of token1 we would like to provide\n  /// @param amount0Min The minimum amount of token0 we want to provide\n  /// @param amount1Min The minimum amount of token1 we want to provide\n  /// @return liquidity The calculated liquidity we get for the token amounts we provided\n  /// @return amount0 The amount of token0 we ended up providing\n  /// @return amount1 The amount of token1 we ended up providing\n  function _addLiquidity(\n    uint256 amount0Desired,\n    uint256 amount1Desired,\n    uint256 amount0Min,\n    uint256 amount1Min\n  )\n    internal\n    returns (\n      uint128 liquidity,\n      uint256 amount0,\n      uint256 amount1\n    )\n  {\n    (uint160 sqrtPriceX96, , , , , , ) = IUniswapV3Pool(pool).slot0();\n\n    liquidity = LiquidityAmounts.getLiquidityForAmounts(sqrtPriceX96, sqrtRatioAX96, sqrtRatioBX96, amount0Desired, amount1Desired);\n\n    (amount0, amount1) = IUniswapV3Pool(pool).mint(\n      address(this),\n      tickLower,\n      tickUpper,\n      liquidity,\n      abi.encode(MintCallbackData({_poolKey: _poolKey, payer: msg.sender}))\n    );\n\n    if (amount0 < amount0Min || amount1 < amount1Min) revert ExcessiveSlippage();\n  }\n\n  /// @notice Transfers the passed-in token from the payer to the recipient for the corresponding value\n  /// @param token The token to be transferred to the recipient\n  /// @param from The address of the payer\n  /// @param to The address of the passed-in tokens recipient\n  /// @param value How much of that token to be transferred from payer to the recipient\n  function _pay(\n    address token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _safeTransferFrom(token, from, to, value);\n  }\n\n  /// @notice Mints Keep3r credits to the passed-in address of recipient and increases total supply of Keep3r credits by the corresponding amount\n  /// @param to The recipient of the Keep3r credits\n  /// @param amount The amount Keep3r credits to be minted to the recipient\n  function _mint(address to, uint256 amount) internal {\n    totalSupply += amount;\n    balanceOf[to] += amount;\n    emit Transfer(address(0), to, amount);\n  }\n\n  /// @notice Burns Keep3r credits to the passed-in address of recipient and reduces total supply of Keep3r credits by the corresponding amount\n  /// @param to The address that will get its Keep3r credits burned\n  /// @param amount The amount Keep3r credits to be burned from the recipient/recipient\n  function _burn(address to, uint256 amount) internal {\n    totalSupply -= amount;\n    balanceOf[to] -= amount;\n    emit Transfer(to, address(0), amount);\n  }\n\n  /// @notice Transfers amount of Keep3r credits between two addresses\n  /// @param from The user that transfers the Keep3r credits\n  /// @param to The user that receives the Keep3r credits\n  /// @param amount The amount of Keep3r credits to be transferred\n  function _transferTokens(\n    address from,\n    address to,\n    uint256 amount\n  ) internal {\n    balanceOf[from] -= amount;\n    balanceOf[to] += amount;\n\n    emit Transfer(from, to, amount);\n  }\n\n  /// @notice Transfers the passed-in token from the specified \"from\" to the specified \"to\" for the corresponding value\n  /// @dev Reverts with IUniV3PairManager#UnsuccessfulTransfer if the transfer was not successful,\n  ///      or if the passed data length is different than 0 and the decoded data is not a boolean\n  /// @param token The token to be transferred to the specified \"to\"\n  /// @param from  The address which is going to transfer the tokens\n  /// @param value How much of that token to be transferred from \"from\" to \"to\"\n  function _safeTransferFrom(\n    address token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    // solhint-disable-next-line avoid-low-level-calls\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n    if (!success || (data.length != 0 && !abi.decode(data, (bool)))) revert UnsuccessfulTransfer();\n  }\n}\n"
    },
    "solidity/interfaces/external/IWeth9.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IWeth9 is IERC20 {\n  function deposit() external payable;\n\n  function withdraw(uint256) external;\n}\n"
    },
    "solidity/interfaces/IUniV3PairManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './IPairManager.sol';\nimport '../contracts/libraries/PoolAddress.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport './peripherals/IGovernable.sol';\n\n/// @title Pair Manager contract\n/// @notice Creates a UniswapV3 position, and tokenizes in an ERC20 manner\n///         so that the user can use it as liquidity for a Keep3rJob\ninterface IUniV3PairManager is IGovernable, IPairManager {\n  // Structs\n\n  /// @notice The data to be decoded by the UniswapV3MintCallback function\n  struct MintCallbackData {\n    PoolAddress.PoolKey _poolKey; // Struct that contains token0, token1, and fee of the pool passed into the constructor\n    address payer; // The address of the payer, which will be the msg.sender of the mint function\n  }\n\n  // Variables\n\n  /// @notice The fee of the Uniswap pool passed into the constructor\n  /// @return _fee The fee of the Uniswap pool passed into the constructor\n  function fee() external view returns (uint24 _fee);\n\n  /// @notice Highest tick in the Uniswap's curve\n  /// @return _tickUpper The highest tick in the Uniswap's curve\n  function tickUpper() external view returns (int24 _tickUpper);\n\n  /// @notice Lowest tick in the Uniswap's curve\n  /// @return _tickLower The lower tick in the Uniswap's curve\n  function tickLower() external view returns (int24 _tickLower);\n\n  /// @notice The pair tick spacing\n  /// @return _tickSpacing The pair tick spacing\n  function tickSpacing() external view returns (int24 _tickSpacing);\n\n  /// @notice The sqrtRatioAX96 at the lowest tick (-887200) of the Uniswap pool\n  /// @return _sqrtPriceA96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n  ///         at the lowest tick\n  function sqrtRatioAX96() external view returns (uint160 _sqrtPriceA96);\n\n  /// @notice The sqrtRatioBX96 at the highest tick (887200) of the Uniswap pool\n  /// @return _sqrtPriceBX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n  ///         at the highest tick\n  function sqrtRatioBX96() external view returns (uint160 _sqrtPriceBX96);\n\n  // Errors\n\n  /// @notice Throws when the caller of the function is not the pool\n  error OnlyPool();\n\n  /// @notice Throws when the slippage exceeds what the user is comfortable with\n  error ExcessiveSlippage();\n\n  /// @notice Throws when a transfer is unsuccessful\n  error UnsuccessfulTransfer();\n\n  // Methods\n\n  /// @notice This function is called after a user calls IUniV3PairManager#mint function\n  ///         It ensures that any tokens owed to the pool are paid by the msg.sender of IUniV3PairManager#mint function\n  /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n  /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n  /// @param data The encoded token0, token1, fee (_poolKey) and the payer (msg.sender) of the IUniV3PairManager#mint function\n  function uniswapV3MintCallback(\n    uint256 amount0Owed,\n    uint256 amount1Owed,\n    bytes calldata data\n  ) external;\n\n  /// @notice Mints kLP tokens to an address according to the liquidity the msg.sender provides to the UniswapV3 pool\n  /// @dev Triggers UniV3PairManager#uniswapV3MintCallback\n  /// @param amount0Desired The amount of token0 we would like to provide\n  /// @param amount1Desired The amount of token1 we would like to provide\n  /// @param amount0Min The minimum amount of token0 we want to provide\n  /// @param amount1Min The minimum amount of token1 we want to provide\n  /// @param to The address to which the kLP tokens are going to be minted to\n  /// @return liquidity kLP tokens sent in exchange for the provision of tokens\n  function mint(\n    uint256 amount0Desired,\n    uint256 amount1Desired,\n    uint256 amount0Min,\n    uint256 amount1Min,\n    address to\n  ) external returns (uint128 liquidity);\n\n  /// @notice Returns the pair manager's position in the corresponding UniswapV3 pool\n  /// @return liquidity The amount of liquidity provided to the UniswapV3 pool by the pair manager\n  /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n  /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n  /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n  /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n  function position()\n    external\n    view\n    returns (\n      uint128 liquidity,\n      uint256 feeGrowthInside0LastX128,\n      uint256 feeGrowthInside1LastX128,\n      uint128 tokensOwed0,\n      uint128 tokensOwed1\n    );\n\n  /// @notice Calls the UniswapV3 pool's collect function, which collects up to a maximum amount of fees\n  //          owed to a specific position to the recipient, in this case, that recipient is the pair manager\n  /// @dev The collected fees will be sent to governance\n  /// @return amount0 The amount of fees collected in token0\n  /// @return amount1 The amount of fees collected in token1\n  function collect() external returns (uint256 amount0, uint256 amount1);\n\n  /// @notice Burns the corresponding amount of kLP tokens from the msg.sender and withdraws the specified liquidity\n  //          in the entire range\n  /// @param liquidity The amount of liquidity to be burned\n  /// @param amount0Min The minimum amount of token0 we want to send to the recipient (to)\n  /// @param amount1Min The minimum amount of token1 we want to send to the recipient (to)\n  /// @param to The address that will receive the due fees\n  /// @return amount0 The calculated amount of token0 that will be sent to the recipient\n  /// @return amount1 The calculated amount of token1 that will be sent to the recipient\n  function burn(\n    uint128 liquidity,\n    uint256 amount0Min,\n    uint256 amount1Min,\n    address to\n  ) external returns (uint256 amount0, uint256 amount1);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "solidity/interfaces/IPairManagerFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport './peripherals/IGovernable.sol';\n\n/// @title Factory of Pair Managers\n/// @notice This contract creates new pair managers\ninterface IPairManagerFactory is IGovernable {\n  // Variables\n\n  /// @notice Maps the address of a Uniswap pool, to the address of the corresponding PairManager\n  ///         For example, the uniswap address of DAI-WETH, will return the Keep3r/DAI-WETH pair manager address\n  /// @param _pool The address of the Uniswap pool\n  /// @return _pairManager The address of the corresponding pair manager\n  function pairManagers(address _pool) external view returns (address _pairManager);\n\n  // Events\n\n  /// @notice Emitted when a new pair manager is created\n  /// @param _pool The address of the corresponding Uniswap pool\n  /// @param _pairManager The address of the just-created pair manager\n  event PairCreated(address _pool, address _pairManager);\n\n  // Errors\n\n  /// @notice Throws an error if the pair manager is already initialized\n  error AlreadyInitialized();\n\n  /// @notice Throws an error if the caller is not the owner\n  error OnlyOwner();\n\n  // Methods\n\n  /// @notice Creates a new pair manager based on the address of a Uniswap pool\n  ///         For example, the uniswap address of DAI-WETH, will create the Keep3r/DAI-WETH pool\n  /// @param _pool The address of the Uniswap pool the pair manager will be based of\n  /// @return _pairManager The address of the just-created pair manager\n  function createPairManager(address _pool) external returns (address _pairManager);\n}\n"
    },
    "solidity/contracts/UniV3PairManagerFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/*\n\nCoded for The Keep3r Network with ♥ by\n\n██████╗░███████╗███████╗██╗  ░██╗░░░░░░░██╗░█████╗░███╗░░██╗██████╗░███████╗██████╗░██╗░░░░░░█████╗░███╗░░██╗██████╗░\n██╔══██╗██╔════╝██╔════╝██║  ░██║░░██╗░░██║██╔══██╗████╗░██║██╔══██╗██╔════╝██╔══██╗██║░░░░░██╔══██╗████╗░██║██╔══██╗\n██║░░██║█████╗░░█████╗░░██║  ░╚██╗████╗██╔╝██║░░██║██╔██╗██║██║░░██║█████╗░░██████╔╝██║░░░░░███████║██╔██╗██║██║░░██║\n██║░░██║██╔══╝░░██╔══╝░░██║  ░░████╔═████║░██║░░██║██║╚████║██║░░██║██╔══╝░░██╔══██╗██║░░░░░██╔══██║██║╚████║██║░░██║\n██████╔╝███████╗██║░░░░░██║  ░░╚██╔╝░╚██╔╝░╚█████╔╝██║░╚███║██████╔╝███████╗██║░░██║███████╗██║░░██║██║░╚███║██████╔╝\n╚═════╝░╚══════╝╚═╝░░░░░╚═╝  ░░░╚═╝░░░╚═╝░░░╚════╝░╚═╝░░╚══╝╚═════╝░╚══════╝╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝╚═╝░░╚══╝╚═════╝░\n\nhttps://defi.sucks\n\n*/\n\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../interfaces/IPairManagerFactory.sol';\nimport './UniV3PairManager.sol';\nimport './peripherals/Governable.sol';\n\n/// @title Factory of Pair Managers\n/// @notice This contract creates new pair managers\ncontract UniV3PairManagerFactory is IPairManagerFactory, Governable {\n  mapping(address => address) public override pairManagers;\n\n  constructor(address _governance) Governable(_governance) {}\n\n  ///@inheritdoc IPairManagerFactory\n  function createPairManager(address _pool) external override returns (address _pairManager) {\n    if (pairManagers[_pool] != address(0)) revert AlreadyInitialized();\n    _pairManager = address(new UniV3PairManager(_pool, governance));\n    pairManagers[_pool] = _pairManager;\n    emit PairCreated(_pool, _pairManager);\n  }\n}\n"
    },
    "solidity/for-test/peripherals/GovernableForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../contracts/peripherals/Governable.sol';\n\ncontract GovernableForTest is Governable {\n  constructor(address _governor) Governable(_governor) {}\n}\n"
    },
    "solidity/for-test/ERC20ForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\ncontract ERC20ForTest is ERC20 {\n  constructor(\n    string memory _name,\n    string memory _symbol,\n    address _initialAccount,\n    uint256 _initialBalance\n  ) ERC20(_name, _symbol) {\n    _mint(_initialAccount, _initialBalance);\n  }\n\n  function mint(address _account, uint256 _amount) public {\n    _mint(_account, _amount);\n  }\n\n  function burn(address _account, uint256 _amount) public {\n    _burn(_account, _amount);\n  }\n\n  function transferInternal(\n    address _from,\n    address _to,\n    uint256 _value\n  ) public {\n    _transfer(_from, _to, _value);\n  }\n\n  function approveInternal(\n    address _owner,\n    address _spender,\n    uint256 _value\n  ) public {\n    _approve(_owner, _spender, _value);\n  }\n\n  function deposit(uint256 _amount) external payable {\n    // Function added for compatibility with WETH\n  }\n}\n"
    },
    "solidity/for-test/peripherals/keepers/Keep3rKeeperFundableForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../../contracts/peripherals/keepers/Keep3rKeeperFundable.sol';\n\ncontract Keep3rKeeperFundableForTest is Keep3rKeeperFundable {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  constructor(\n    address _kph,\n    address _keep3rV1,\n    address _keep3rV1Proxy,\n    address _kp3rWethPool\n  ) Keep3rParameters(_kph, _keep3rV1, _keep3rV1Proxy, _kp3rWethPool) Keep3rRoles(msg.sender) {}\n\n  function isKeeper(address _keeper) external view returns (bool) {\n    return _keepers.contains(_keeper);\n  }\n\n  function setJob(address job) external {\n    _jobs.add(job);\n  }\n}\n"
    },
    "solidity/for-test/peripherals/jobs/Keep3rJobWorkableForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../../contracts/peripherals/jobs/Keep3rJobWorkable.sol';\n\ncontract Keep3rJobWorkableForTest is Keep3rJobWorkable {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  constructor(\n    address _keep3rHelper,\n    address _keep3rV1,\n    address _keep3rV1Proxy,\n    address _kp3rWethPool\n  ) Keep3rParameters(_keep3rHelper, _keep3rV1, _keep3rV1Proxy, _kp3rWethPool) Keep3rRoles(msg.sender) {}\n\n  function setJob(address _job) external {\n    _jobs.add(_job);\n  }\n\n  function setKeeper(address _keeper) external {\n    _keepers.add(_keeper);\n  }\n\n  function setApprovedLiquidity(address _liquidity) external {\n    _approvedLiquidities.add(_liquidity);\n  }\n\n  function setJobLiquidity(address _job, address _liquidity) external {\n    _jobLiquidities[_job].add(_liquidity);\n  }\n\n  function viewJobLiquidityCredits(address _job) external view returns (uint256) {\n    return _jobLiquidityCredits[_job];\n  }\n\n  function viewJobPeriodCredits(address _job) external view returns (uint256) {\n    return _jobPeriodCredits[_job];\n  }\n\n  function viewTickCache(address _liquidity) external view returns (TickCache memory _tickCache) {\n    _tickCache = _tick[_liquidity];\n  }\n\n  function viewGas() external view returns (uint256) {\n    return _initialGas;\n  }\n\n  receive() external payable {}\n}\n"
    },
    "solidity/for-test/peripherals/jobs/Keep3rJobManagerForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../../contracts/peripherals/jobs/Keep3rJobManager.sol';\n\ncontract Keep3rJobManagerForTest is Keep3rJobManager {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  constructor(\n    address _keep3rHelper,\n    address _keep3rV1,\n    address _keep3rV1Proxy,\n    address _kp3rWethPool\n  ) Keep3rParameters(_keep3rHelper, _keep3rV1, _keep3rV1Proxy, _kp3rWethPool) Keep3rRoles(msg.sender) {}\n\n  function isJob(address _job) external view returns (bool _isJob) {\n    _isJob = _jobs.contains(_job);\n  }\n}\n"
    },
    "solidity/for-test/peripherals/Keep3rParametersForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../contracts/peripherals/Keep3rParameters.sol';\n\ncontract Keep3rParametersForTest is Keep3rParameters {\n  constructor(\n    address _keep3rHelper,\n    address _keep3rV1,\n    address _keep3rV1Proxy,\n    address _kp3rWethPool\n  ) Keep3rParameters(_keep3rHelper, _keep3rV1, _keep3rV1Proxy, _kp3rWethPool) Keep3rRoles(msg.sender) {}\n\n  function viewLiquidityPool(address _pool) public view returns (address) {\n    return _liquidityPool[_pool];\n  }\n\n  function viewIsKP3RToken0(address _pool) public view returns (bool) {\n    return _isKP3RToken0[_pool];\n  }\n}\n"
    },
    "solidity/for-test/peripherals/Keep3rDisputableForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../contracts/peripherals/Keep3rDisputable.sol';\n\ncontract Keep3rDisputableForTest is Keep3rDisputable {\n  constructor() Keep3rRoles(msg.sender) {}\n}\n"
    },
    "solidity/for-test/peripherals/keepers/Keep3rKeeperDisputableForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../../contracts/peripherals/keepers/Keep3rKeeperDisputable.sol';\n\ncontract Keep3rKeeperDisputableForTest is Keep3rKeeperDisputable {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  constructor(\n    address _kph,\n    address _keep3rV1,\n    address _keep3rV1Proxy,\n    address _kp3rWethPool\n  ) Keep3rParameters(_kph, _keep3rV1, _keep3rV1Proxy, _kp3rWethPool) Keep3rRoles(msg.sender) {}\n\n  function setKeeper(address _keeper) external {\n    _keepers.add(_keeper);\n  }\n\n  function internalSlash(\n    address _bonded,\n    address _keeper,\n    uint256 _bondAmount,\n    uint256 _unbondAmount\n  ) external {\n    _slash(_bonded, _keeper, _bondAmount, _unbondAmount);\n  }\n\n  function isKeeper(address _address) external view returns (bool _isKeeper) {\n    _isKeeper = _keepers.contains(_address);\n  }\n}\n"
    },
    "solidity/for-test/peripherals/Keep3rAccountanceForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../contracts/peripherals/Keep3rAccountance.sol';\n\ncontract Keep3rAccountanceForTest is Keep3rAccountance {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  function setJob(address job) external {\n    _jobs.add(job);\n  }\n\n  function setKeeper(address keeper) external {\n    _keepers.add(keeper);\n  }\n}\n"
    },
    "solidity/for-test/peripherals/jobs/Keep3rJobFundableLiquidityForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../../contracts/peripherals/jobs/Keep3rJobFundableLiquidity.sol';\n\ncontract Keep3rJobFundableLiquidityForTest is Keep3rJobFundableLiquidity {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  constructor(\n    address _kph,\n    address _keep3rV1,\n    address _keep3rV1Proxy,\n    address _kp3rWethPool\n  ) Keep3rParameters(_kph, _keep3rV1, _keep3rV1Proxy, _kp3rWethPool) Keep3rRoles(msg.sender) {}\n\n  function setJob(address _job) external {\n    _jobs.add(_job);\n  }\n\n  function setJobLiquidity(address _job, address _liquidity) external returns (bool) {\n    return _jobLiquidities[_job].add(_liquidity);\n  }\n\n  function setApprovedLiquidity(address _liquidity) external {\n    _approvedLiquidities.add(_liquidity);\n  }\n\n  function setRevokedLiquidity(address _liquidity) external {\n    _approvedLiquidities.remove(_liquidity);\n  }\n\n  function viewTickCache(address _liquidity) external view returns (TickCache memory _tickCache) {\n    _tickCache = _tick[_liquidity];\n  }\n\n  function viewTickOrder(address _liquidity) external view returns (bool) {\n    return _isKP3RToken0[_liquidity];\n  }\n\n  function internalJobLiquidities(address _job) external view returns (address[] memory _list) {\n    _list = _jobLiquidities[_job].values();\n  }\n\n  function internalSettleJobAccountance(address _job) external {\n    _settleJobAccountance(_job);\n  }\n}\n"
    },
    "solidity/for-test/peripherals/jobs/Keep3rJobMigrationForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../../contracts/peripherals/jobs/Keep3rJobMigration.sol';\n\ncontract Keep3rJobMigrationForTest is Keep3rJobMigration {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(address => uint256) public settleJobAccountanceCallCount;\n\n  constructor(\n    address _kph,\n    address _keep3rV1,\n    address _keep3rV1Proxy,\n    address _kp3rWethPool\n  ) Keep3rParameters(_kph, _keep3rV1, _keep3rV1Proxy, _kp3rWethPool) Keep3rRoles(msg.sender) {}\n\n  function setJobToken(address _job, address _token) external {\n    _jobTokens[_job].add(_token);\n  }\n\n  function setJobLiquidity(address _job, address _liquidity) external {\n    _jobLiquidities[_job].add(_liquidity);\n  }\n\n  function viewJobTokenListLength(address _job) external view returns (uint256) {\n    return _jobTokens[_job].length();\n  }\n\n  function viewJobLiquidityList(address _job) external view returns (address[] memory _list) {\n    _list = _jobLiquidities[_job].values();\n  }\n\n  function viewJobPeriodCredits(address _job) external view returns (uint256) {\n    return _jobPeriodCredits[_job];\n  }\n\n  function viewJobLiquidityCredits(address _job) external view returns (uint256) {\n    return _jobLiquidityCredits[_job];\n  }\n\n  function viewMigrationCreatedAt(address _fromJob, address _toJob) external view returns (uint256) {\n    return _migrationCreatedAt[_fromJob][_toJob];\n  }\n\n  function isJob(address _job) external view returns (bool) {\n    return _jobs.contains(_job);\n  }\n\n  function _settleJobAccountance(address _job) internal override {\n    settleJobAccountanceCallCount[_job]++;\n  }\n}\n"
    },
    "solidity/for-test/peripherals/jobs/Keep3rJobFundableCreditsForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../../contracts/peripherals/jobs/Keep3rJobFundableCredits.sol';\n\ncontract Keep3rJobFundableCreditsForTest is Keep3rJobFundableCredits {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  constructor(\n    address _kph,\n    address _keep3rV1,\n    address _keep3rV1Proxy,\n    address _kp3rWethPool\n  ) Keep3rParameters(_kph, _keep3rV1, _keep3rV1Proxy, _kp3rWethPool) Keep3rRoles(msg.sender) {}\n\n  function setJob(address _job, address _jobOwner) external {\n    _jobs.add(_job);\n    jobOwner[_job] = _jobOwner;\n  }\n\n  function setJobToken(address _job, address _token) external {\n    _jobTokens[_job].add(_token);\n  }\n\n  function isJobToken(address _job, address _token) external view returns (bool _contains) {\n    _contains = _jobTokens[_job].contains(_token);\n  }\n}\n"
    },
    "solidity/contracts/Keep3rHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/*\n\nCoded for The Keep3r Network with ♥ by\n\n██████╗░███████╗███████╗██╗  ░██╗░░░░░░░██╗░█████╗░███╗░░██╗██████╗░███████╗██████╗░██╗░░░░░░█████╗░███╗░░██╗██████╗░\n██╔══██╗██╔════╝██╔════╝██║  ░██║░░██╗░░██║██╔══██╗████╗░██║██╔══██╗██╔════╝██╔══██╗██║░░░░░██╔══██╗████╗░██║██╔══██╗\n██║░░██║█████╗░░█████╗░░██║  ░╚██╗████╗██╔╝██║░░██║██╔██╗██║██║░░██║█████╗░░██████╔╝██║░░░░░███████║██╔██╗██║██║░░██║\n██║░░██║██╔══╝░░██╔══╝░░██║  ░░████╔═████║░██║░░██║██║╚████║██║░░██║██╔══╝░░██╔══██╗██║░░░░░██╔══██║██║╚████║██║░░██║\n██████╔╝███████╗██║░░░░░██║  ░░╚██╔╝░╚██╔╝░╚█████╔╝██║░╚███║██████╔╝███████╗██║░░██║███████╗██║░░██║██║░╚███║██████╔╝\n╚═════╝░╚══════╝╚═╝░░░░░╚═╝  ░░░╚═╝░░░╚═╝░░░╚════╝░╚═╝░░╚══╝╚═════╝░╚══════╝╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝╚═╝░░╚══╝╚═════╝░\n\nhttps://defi.sucks\n\n*/\n\npragma solidity >=0.8.7 <0.9.0;\n\nimport './libraries/FullMath.sol';\nimport './libraries/TickMath.sol';\nimport '../interfaces/IKeep3r.sol';\nimport '../interfaces/IKeep3rHelper.sol';\nimport './Keep3rHelperParameters.sol';\n\nimport '@openzeppelin/contracts/utils/math/Math.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\ncontract Keep3rHelper is IKeep3rHelper, Keep3rHelperParameters {\n  constructor(address _keep3rV2, address _governance) Keep3rHelperParameters(_keep3rV2, _governance) {}\n\n  /// @inheritdoc IKeep3rHelper\n  function quote(uint256 _eth) public view override returns (uint256 _amountOut) {\n    uint32[] memory _secondsAgos = new uint32[](2);\n    _secondsAgos[1] = quoteTwapTime;\n\n    (int56[] memory _tickCumulatives, ) = IUniswapV3Pool(kp3rWethPool.poolAddress).observe(_secondsAgos);\n    int56 _difference = _tickCumulatives[0] - _tickCumulatives[1];\n    _amountOut = getQuoteAtTick(uint128(_eth), kp3rWethPool.isKP3RToken0 ? _difference : -_difference, quoteTwapTime);\n  }\n\n  /// @inheritdoc IKeep3rHelper\n  function bonds(address _keeper) public view override returns (uint256 _amountBonded) {\n    return IKeep3r(keep3rV2).bonds(_keeper, KP3R);\n  }\n\n  /// @inheritdoc IKeep3rHelper\n  function getRewardAmountFor(address _keeper, uint256 _gasUsed) public view override returns (uint256 _kp3r) {\n    uint256 _boost = getRewardBoostFor(bonds(_keeper));\n    _kp3r = quote((_gasUsed * _boost) / BOOST_BASE);\n  }\n\n  /// @inheritdoc IKeep3rHelper\n  function getRewardAmount(uint256 _gasUsed) external view override returns (uint256 _amount) {\n    // solhint-disable-next-line avoid-tx-origin\n    return getRewardAmountFor(tx.origin, _gasUsed);\n  }\n\n  /// @inheritdoc IKeep3rHelper\n  function getRewardBoostFor(uint256 _bonds) public view override returns (uint256 _rewardBoost) {\n    _bonds = Math.min(_bonds, targetBond);\n    uint256 _cap = Math.max(minBoost, minBoost + ((maxBoost - minBoost) * _bonds) / targetBond);\n    _rewardBoost = _cap * _getBasefee();\n  }\n\n  /// @inheritdoc IKeep3rHelper\n  function getPoolTokens(address _pool) public view override returns (address _token0, address _token1) {\n    return (IUniswapV3Pool(_pool).token0(), IUniswapV3Pool(_pool).token1());\n  }\n\n  /// @inheritdoc IKeep3rHelper\n  function isKP3RToken0(address _pool) public view override returns (bool _isKP3RToken0) {\n    address _token0;\n    address _token1;\n    (_token0, _token1) = getPoolTokens(_pool);\n    if (_token0 == KP3R) {\n      return true;\n    } else if (_token1 != KP3R) {\n      revert LiquidityPairInvalid();\n    }\n  }\n\n  /// @inheritdoc IKeep3rHelper\n  function observe(address _pool, uint32[] memory _secondsAgo)\n    public\n    view\n    override\n    returns (\n      int56 _tickCumulative1,\n      int56 _tickCumulative2,\n      bool _success\n    )\n  {\n    try IUniswapV3Pool(_pool).observe(_secondsAgo) returns (int56[] memory _uniswapResponse, uint160[] memory) {\n      _tickCumulative1 = _uniswapResponse[0];\n      if (_uniswapResponse.length > 1) {\n        _tickCumulative2 = _uniswapResponse[1];\n      }\n      _success = true;\n    } catch (bytes memory) {}\n  }\n\n  /// @inheritdoc IKeep3rHelper\n  function getPaymentParams(uint256 _bonds)\n    external\n    view\n    override\n    returns (\n      uint256 _boost,\n      uint256 _oneEthQuote,\n      uint256 _extra\n    )\n  {\n    _oneEthQuote = quote(1 ether);\n    _boost = getRewardBoostFor(_bonds);\n    _extra = workExtraGas;\n  }\n\n  /// @inheritdoc IKeep3rHelper\n  function getKP3RsAtTick(\n    uint256 _liquidityAmount,\n    int56 _tickDifference,\n    uint256 _timeInterval\n  ) public pure override returns (uint256 _kp3rAmount) {\n    uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(int24(_tickDifference / int256(_timeInterval)));\n    _kp3rAmount = FullMath.mulDiv(1 << 96, _liquidityAmount, sqrtRatioX96);\n  }\n\n  /// @inheritdoc IKeep3rHelper\n  function getQuoteAtTick(\n    uint128 _baseAmount,\n    int56 _tickDifference,\n    uint256 _timeInterval\n  ) public pure override returns (uint256 _quoteAmount) {\n    uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(int24(_tickDifference / int256(_timeInterval)));\n\n    if (sqrtRatioX96 <= type(uint128).max) {\n      uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\n      _quoteAmount = FullMath.mulDiv(1 << 192, _baseAmount, ratioX192);\n    } else {\n      uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\n      _quoteAmount = FullMath.mulDiv(1 << 128, _baseAmount, ratioX128);\n    }\n  }\n\n  /// @notice Gets the gas basefee cost to calculate keeper rewards\n  /// @dev Keepers are required to pay a priority fee to be included, this function recognizes a minimum priority fee\n  /// @return _baseFee The block's basefee + a minimum priority fee, or a preset minimum gas fee\n  function _getBasefee() internal view virtual returns (uint256 _baseFee) {\n    return Math.max(minBaseFee, block.basefee + minPriorityFee);\n  }\n}\n"
    },
    "solidity/for-test/Keep3rHelperForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../contracts/Keep3rHelper.sol';\n\ncontract Keep3rHelperForTest is Keep3rHelper {\n  uint256 public basefee;\n\n  constructor(address _keep3rV2, address _governance) Keep3rHelper(_keep3rV2, _governance) {}\n\n  function _getBasefee() internal view override returns (uint256) {\n    return basefee != 0 ? (basefee + minPriorityFee) : super._getBasefee();\n  }\n\n  function setBaseFee(uint256 _baseFee) external {\n    basefee = _baseFee;\n  }\n}\n"
    },
    "solidity/for-test/libraries/LiquidityAmountsForTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../contracts/libraries/FullMath.sol';\nimport '../../contracts/libraries/FixedPoint96.sol';\n\n/// @dev Made this library into a contract to be able to calculate liquidity more precisely for tests\n\n// solhint-disable\ncontract LiquidityAmountsForTest {\n  function toUint128(uint256 x) private pure returns (uint128 y) {\n    require((y = uint128(x)) == x);\n  }\n\n  function getLiquidityForAmount0(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint256 amount0\n  ) public pure returns (uint128 liquidity) {\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n    uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\n    return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n  }\n\n  function getLiquidityForAmount1(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint256 amount1\n  ) public pure returns (uint128 liquidity) {\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n    return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\n  }\n\n  function getLiquidityForAmounts(\n    uint160 sqrtRatioX96,\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint256 amount0,\n    uint256 amount1\n  ) external pure returns (uint128 liquidity) {\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\n      liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\n      uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n      uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n      liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n    } else {\n      liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n    }\n  }\n\n  function getAmount0ForLiquidity(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint128 liquidity\n  ) public pure returns (uint256 amount0) {\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n    return FullMath.mulDiv(uint256(liquidity) << FixedPoint96.RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96) / sqrtRatioAX96;\n  }\n\n  function getAmount1ForLiquidity(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint128 liquidity\n  ) public pure returns (uint256 amount1) {\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n    return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n  }\n\n  function getAmountsForLiquidity(\n    uint160 sqrtRatioX96,\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint128 liquidity\n  ) external pure returns (uint256 amount0, uint256 amount1) {\n    if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\n      amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\n      amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\n      amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\n    } else {\n      amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n    }\n  }\n}\n"
    },
    "solidity/for-test/peripherals/jobs/Keep3rJobOwnershipForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../../contracts/peripherals/jobs/Keep3rJobOwnership.sol';\n\ncontract Keep3rJobOwnershipForTest is Keep3rJobOwnership {}\n"
    },
    "solidity/for-test/peripherals/jobs/Keep3rJobDisputableForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '../../../contracts/peripherals/jobs/Keep3rJobDisputable.sol';\n\ncontract Keep3rJobDisputableForTest is Keep3rJobDisputable {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  constructor(\n    address _kph,\n    address _keep3rV1,\n    address _keep3rV1Proxy,\n    address _kp3rWethPool\n  ) Keep3rParameters(_kph, _keep3rV1, _keep3rV1Proxy, _kp3rWethPool) Keep3rRoles(msg.sender) {}\n\n  function setJobLiquidity(address _job, address _liquidity) external {\n    _jobLiquidities[_job].add(_liquidity);\n  }\n\n  function setJobToken(address _job, address _token) external {\n    _jobTokens[_job].add(_token);\n  }\n\n  function setApprovedLiquidity(address _liquidity) external {\n    _approvedLiquidities.add(_liquidity);\n  }\n\n  function setRevokedLiquidity(address _liquidity) external {\n    _approvedLiquidities.remove(_liquidity);\n  }\n\n  function internalJobLiquidityCredits(address _job) external view returns (uint256 _credits) {\n    _credits = _jobLiquidityCredits[_job];\n  }\n\n  function internalJobPeriodCredits(address _job) external view returns (uint256 _credits) {\n    _credits = _jobPeriodCredits[_job];\n  }\n\n  function internalJobTokens(address _job) external view returns (address[] memory _tokens) {\n    _tokens = new address[](_jobTokens[_job].length());\n    for (uint256 i; i < _jobTokens[_job].length(); i++) {\n      _tokens[i] = _jobTokens[_job].at(i);\n    }\n  }\n\n  function internalJobLiquidities(address _job) external view returns (address[] memory _tokens) {\n    _tokens = new address[](_jobLiquidities[_job].length());\n    for (uint256 i; i < _jobLiquidities[_job].length(); i++) {\n      _tokens[i] = _jobLiquidities[_job].at(i);\n    }\n  }\n}\n"
    },
    "solidity/for-test/IUniswapV3PoolForTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.4 <0.9.0;\n\nimport '@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol';\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\n\n// solhint-disable-next-line no-empty-blocks\ninterface IUniswapV3PoolForTest is IERC20Minimal, IUniswapV3Pool {\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IERC20Minimal.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Minimal ERC20 interface for Uniswap\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\ninterface IERC20Minimal {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 33
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}